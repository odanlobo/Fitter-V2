import Foundation
import Combine
import CoreData
import RevenueCat

/// **SubscriptionManager.swift**
/// Orquestrador central do sistema de assinaturas premium
/// 
/// **RESPONSABILIDADES:**
/// - Consome RevenueCatService como fonte √∫nica de verdade
/// - Exp√µe publishers simples para toda a UI do app
/// - Integra com CloudSyncManager para sincroniza√ß√£o
/// - Atualiza CDAppUser no Core Data ap√≥s mudan√ßas
/// - Gerencia cache local e estados offline
///
/// **ARQUITETURA:**
/// - Orquestrador puro (n√£o executa opera√ß√µes de compra)
/// - Publishers centralizados para UI reativa
/// - Integra√ß√£o com sistema existente via DI
/// - Thread-safe e async/await
///
/// ‚ö†Ô∏è **REMOVER ANTES DO LAN√áAMENTO:** Sistema de admin para desenvolvimento


protocol SubscriptionManagerProtocol {
    var isPremium: Bool { get }
    var subscriptionStatus: SubscriptionStatus { get }
    var isLoading: Bool { get }
    var lastError: Error? { get }
    
    func refreshSubscriptionStatus() async
    func clearSubscriptionData() async
    func getSubscriptionStatus(for user: CDAppUser) async -> SubscriptionStatus
    func updateUserSubscription(_ user: CDAppUser) async
    
    // ‚úÖ ITEM 63: Fluxos completos de monetiza√ß√£o com UX otimizada
    func purchase(_ package: Package, showConfirmation: Bool) async throws -> PurchaseResult
    func restorePurchases(showConfirmation: Bool) async throws -> RestoreResult
    func upgradeSubscription(to package: Package, showConfirmation: Bool) async throws -> UpgradeResult
    func downgradeSubscription(to package: Package, showConfirmation: Bool) async throws -> DowngradeResult
    func cancelSubscription(showConfirmation: Bool) async throws -> CancellationResult
    func reactivateSubscription(package: Package) async throws -> ReactivationResult
    
    // ‚úÖ ITEM 63: Valida√ß√£o e eligibilidade para fluxos
    func canPurchase(_ package: Package) async -> PurchaseEligibility
    func canUpgrade(to package: Package) async -> UpgradeEligibility
    func canDowngrade(to package: Package) async -> DowngradeEligibility
    func getRecommendedPackages() async -> [Package]
}

@MainActor
final class SubscriptionManager: ObservableObject, SubscriptionManagerProtocol {
    
    // MARK: - Dependencies
    
    private let revenueCatService: RevenueCatServiceProtocol
    private let cloudSyncManager: CloudSyncManagerProtocol
    private let coreDataService: CoreDataServiceProtocol
    
    // MARK: - Published Properties
    
    /// Status premium do usu√°rio atual
    /// ‚úÖ Publisher central para toda a UI do app
    @Published private(set) var isPremium: Bool = false
    
    /// Status detalhado da assinatura
    /// ‚úÖ Para ProfileView e analytics
    @Published private(set) var subscriptionStatus: SubscriptionStatus = .none
    
    /// Indica se est√° carregando dados
    @Published private(set) var isLoading: Bool = false
    
    /// √öltimo erro ocorrido
    @Published private(set) var lastError: Error?
    
    // MARK: - Private Properties
    
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    
    init(
        revenueCatService: RevenueCatServiceProtocol,
        cloudSyncManager: CloudSyncManagerProtocol,
        coreDataService: CoreDataServiceProtocol
    ) {
        self.revenueCatService = revenueCatService
        self.cloudSyncManager = cloudSyncManager
        self.coreDataService = coreDataService
        
        setupRevenueCatObservers()
    }
    
    // MARK: - Public Methods
    
    /// Atualiza status de assinatura do RevenueCat
    /// ‚úÖ Chamado ap√≥s login ou mudan√ßas de entitlement
    func refreshSubscriptionStatus() async {
        print("üîÑ [SUBSCRIPTION] Atualizando status de assinatura...")
        isLoading = true
        lastError = nil
        
        // ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Sistema de admin apenas para desenvolvimento
        // ‚úÖ VERIFICA√á√ÉO ADMIN: Se n√£o h√° usu√°rio atual, tentar RevenueCat
        // Se h√° usu√°rio atual, verificar se √© admin primeiro
        if let currentUser = getCurrentUser() {
            if await self.isAdminUser(currentUser) {
                print("üëë [SUBSCRIPTION] Usu√°rio admin detectado, definindo premium")
                isPremium = true
                subscriptionStatus = .active(type: .lifetime, expiresAt: Date.distantFuture)
                isLoading = false
                return
            }
        }
        
        do {
            let customerInfo = try await revenueCatService.getCustomerInfo()
            await updateSubscriptionStatus(from: customerInfo)
            print("‚úÖ [SUBSCRIPTION] Status atualizado com sucesso")
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro ao atualizar status: \(error)")
            lastError = error
        }
        
        isLoading = false
    }
    
    /// Limpa dados de assinatura
    /// ‚úÖ Chamado pelo AuthUseCase.logout
    func clearSubscriptionData() async {
        print("üßπ [SUBSCRIPTION] Limpando dados de assinatura...")
        
        // Reset local state
        isPremium = false
        subscriptionStatus = .none
        lastError = nil
        
        // Reset RevenueCat
        await revenueCatService.reset()
        
        print("‚úÖ [SUBSCRIPTION] Dados limpos com sucesso")
    }
    
    /// Obt√©m status de assinatura para usu√°rio espec√≠fico
    /// ‚úÖ Para AuthUseCase.checkSubscriptionStatus
    func getSubscriptionStatus(for user: CDAppUser) async -> SubscriptionStatus {
        // ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Sistema de admin apenas para desenvolvimento
        // ‚úÖ VERIFICA√á√ÉO ADMIN: Bypass para usu√°rios admin/teste
        if await self.isAdminUser(user) {
            print("üëë [SUBSCRIPTION] Usu√°rio admin detectado: \(user.safeName)")
            return .active(type: .lifetime, expiresAt: Date.distantFuture)
        }
        
        // ‚úÖ Verificar se h√° dados locais atualizados
        if let localStatus = user.subscriptionStatus {
            return localStatus
        }
        
        // ‚úÖ Buscar do RevenueCat se necess√°rio
        do {
            let customerInfo = try await revenueCatService.getCustomerInfo()
            let status = await parseSubscriptionStatus(from: customerInfo)
            
            // ‚úÖ Atualizar usu√°rio local
            await updateUserSubscription(user, with: status)
            
            return status
        } catch {
            print("‚ö†Ô∏è [SUBSCRIPTION] Erro ao buscar status para \(user.safeName): \(error)")
            return .none
        }
    }
    
    /// Atualiza dados de assinatura do usu√°rio no Core Data
    /// ‚úÖ Para sincroniza√ß√£o local ap√≥s mudan√ßas
    func updateUserSubscription(_ user: CDAppUser) async {
        // ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Sistema de admin apenas para desenvolvimento
        // ‚úÖ VERIFICA√á√ÉO ADMIN: Bypass para usu√°rios admin/teste
        if await self.isAdminUser(user) {
            print("üëë [SUBSCRIPTION] Usu√°rio admin detectado: \(user.safeName)")
            let adminStatus = SubscriptionStatus.active(type: .lifetime, expiresAt: Date.distantFuture)
            await updateUserSubscription(user, with: adminStatus)
            await cloudSyncManager.scheduleUpload(for: user)
            return
        }
        
        do {
            let customerInfo = try await revenueCatService.getCustomerInfo()
            let status = await parseSubscriptionStatus(from: customerInfo)
            
            await updateUserSubscription(user, with: status)
            
            // ‚úÖ Sincronizar com Firestore
            await cloudSyncManager.scheduleUpload(for: user)
            
            print("‚úÖ [SUBSCRIPTION] Usu√°rio \(user.safeName) atualizado com status: \(status)")
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro ao atualizar usu√°rio: \(error)")
            lastError = error
        }
    }
    
    // MARK: - Private Methods
    
    /// Configura observadores do RevenueCatService
    /// ‚úÖ Clean Architecture - usando publishers do protocol
    private func setupRevenueCatObservers() {
        // ‚úÖ Observar mudan√ßas de isPremium via protocol
        revenueCatService.isPremiumPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] isPremium in
                self?.isPremium = isPremium
                print("üîÑ [SUBSCRIPTION] Status premium alterado: \(isPremium)")
            }
            .store(in: &cancellables)
        
        // ‚úÖ Observar mudan√ßas de customerInfo via protocol
        revenueCatService.customerInfoPublisher
            .receive(on: DispatchQueue.main)
            .compactMap { $0 }
            .sink { [weak self] customerInfo in
                Task { @MainActor in
                    await self?.updateSubscriptionStatus(from: customerInfo)
                }
            }
            .store(in: &cancellables)
        
        // ‚úÖ Observar erros do RevenueCat via protocol
        revenueCatService.lastErrorPublisher
            .receive(on: DispatchQueue.main)
            .compactMap { $0 }
            .sink { [weak self] error in
                self?.lastError = error
                print("‚ö†Ô∏è [SUBSCRIPTION] Erro do RevenueCat: \(error)")
            }
            .store(in: &cancellables)
    }
    
    /// Atualiza status de assinatura a partir do CustomerInfo
    private func updateSubscriptionStatus(from customerInfo: CustomerInfo) async {
        let newStatus = await parseSubscriptionStatus(from: customerInfo)
        
        // ‚úÖ Atualizar estado local
        subscriptionStatus = newStatus
        isPremium = newStatus.isActive
        
        print("‚ÑπÔ∏è [SUBSCRIPTION] Status atualizado:")
        print("   - Premium: \(isPremium)")
        print("   - Status: \(newStatus)")
    }
    
    /// Converte CustomerInfo para SubscriptionStatus
    /// ‚úÖ Analisa entitlements e datas para determinar status correto
    private func parseSubscriptionStatus(from customerInfo: CustomerInfo) async -> SubscriptionStatus {
        guard let premiumEntitlement = customerInfo.entitlements.active["premium"] else {
            return .none
        }
        
        // ‚úÖ Determinar tipo de assinatura baseado no productId
        let productId = premiumEntitlement.productIdentifier
        let subscriptionType: SubscriptionType
        
        switch productId {
        case "fitter.monthly":
            subscriptionType = .monthly
        case "fitter.yearly":
            subscriptionType = .yearly
        case "fitter.lifetime":
            subscriptionType = .lifetime
        default:
            subscriptionType = .none
        }
        
        // ‚úÖ Verificar se est√° ativo
        if premiumEntitlement.isActive {
            if let expirationDate = premiumEntitlement.expirationDate {
                // ‚úÖ Assinatura com data de expira√ß√£o
                if Date() < expirationDate {
                    return .active(type: subscriptionType, expiresAt: expirationDate)
                } else {
                    return .expired(type: subscriptionType, expiredAt: expirationDate)
                }
            } else {
                // ‚úÖ Assinatura vital√≠cia
                return .active(type: subscriptionType, expiresAt: Date.distantFuture)
            }
        } else {
            // ‚úÖ Assinatura inativa
            if let expirationDate = premiumEntitlement.expirationDate {
                return .expired(type: subscriptionType, expiredAt: expirationDate)
            } else {
                return .none
            }
        }
    }
    
    // MARK: - ITEM 63: Fluxos Completos de Monetiza√ß√£o com UX Otimizada
    
    /// Realiza compra com UX otimizada e feedback completo
    /// ‚úÖ Loading states, confirma√ß√µes, feedback de sucesso/erro
    func purchase(_ package: Package, showConfirmation: Bool = true) async throws -> PurchaseResult {
        print("üí∞ [SUBSCRIPTION] Iniciando compra com UX otimizada: \(package.storeProduct.localizedTitle)")
        
        // ‚úÖ Verificar elegibilidade
        let eligibility = await canPurchase(package)
        guard eligibility.canPurchase else {
            let error = SubscriptionError.purchaseNotEligible(reason: eligibility.reason)
            lastError = error
            throw error
        }
        
        // ‚úÖ Estado de loading
        isLoading = true
        lastError = nil
        
        do {
            // ‚úÖ Realizar compra via RevenueCat
            let customerInfo = try await revenueCatService.purchase(package)
            
            // ‚úÖ Atualizar status local
            await updateSubscriptionStatus(from: customerInfo)
            
            // ‚úÖ Sincronizar com usu√°rio atual se dispon√≠vel
            if let currentUser = getCurrentUser() {
                await updateUserSubscription(currentUser)
            }
            
            // ‚úÖ Resultado da compra
            let result = PurchaseResult(
                success: true,
                package: package,
                customerInfo: customerInfo,
                previousStatus: subscriptionStatus,
                newStatus: await parseSubscriptionStatus(from: customerInfo),
                message: "Compra realizada com sucesso! Bem-vindo ao Fitter Premium!"
            )
            
            print("‚úÖ [SUBSCRIPTION] Compra realizada com sucesso: \(package.storeProduct.localizedTitle)")
            isLoading = false
            return result
            
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro na compra: \(error)")
            isLoading = false
            lastError = error
            
            let result = PurchaseResult(
                success: false,
                package: package,
                customerInfo: nil,
                previousStatus: subscriptionStatus,
                newStatus: subscriptionStatus,
                message: getErrorMessage(for: error)
            )
            
            throw SubscriptionError.purchaseFailed(error: error, result: result)
        }
    }
    
    /// Restaura compras com feedback detalhado
    /// ‚úÖ UX otimizada com loading states e mensagens claras
    func restorePurchases(showConfirmation: Bool = true) async throws -> RestoreResult {
        print("üîÑ [SUBSCRIPTION] Restaurando compras com UX otimizada...")
        
        isLoading = true
        lastError = nil
        let previousStatus = subscriptionStatus
        
        do {
            let customerInfo = try await revenueCatService.restorePurchases()
            
            // ‚úÖ Atualizar status local
            await updateSubscriptionStatus(from: customerInfo)
            
            // ‚úÖ Sincronizar com usu√°rio atual se dispon√≠vel
            if let currentUser = getCurrentUser() {
                await updateUserSubscription(currentUser)
            }
            
            let newStatus = await parseSubscriptionStatus(from: customerInfo)
            let hasActivePurchases = newStatus != .none
            
            let result = RestoreResult(
                success: true,
                customerInfo: customerInfo,
                previousStatus: previousStatus,
                newStatus: newStatus,
                hasActivePurchases: hasActivePurchases,
                message: hasActivePurchases ? 
                    "Compras restauradas com sucesso! Acesso premium ativado." :
                    "N√£o foram encontradas compras anteriores para restaurar."
            )
            
            print("‚úÖ [SUBSCRIPTION] Compras restauradas - Status: \(hasActivePurchases ? "Ativas" : "Nenhuma")")
            isLoading = false
            return result
            
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro ao restaurar: \(error)")
            isLoading = false
            lastError = error
            
            let result = RestoreResult(
                success: false,
                customerInfo: nil,
                previousStatus: previousStatus,
                newStatus: subscriptionStatus,
                hasActivePurchases: false,
                message: getErrorMessage(for: error)
            )
            
            throw SubscriptionError.restoreFailed(error: error, result: result)
        }
    }
    
    /// Upgrade de assinatura com valida√ß√£o autom√°tica
    /// ‚úÖ Valida se √© realmente um upgrade e gerencia transi√ß√£o
    func upgradeSubscription(to package: Package, showConfirmation: Bool = true) async throws -> UpgradeResult {
        print("‚¨ÜÔ∏è [SUBSCRIPTION] Upgrade para: \(package.storeProduct.localizedTitle)")
        
        // ‚úÖ Verificar elegibilidade para upgrade
        let eligibility = await canUpgrade(to: package)
        guard eligibility.canUpgrade else {
            let error = SubscriptionError.upgradeNotEligible(reason: eligibility.reason)
            lastError = error
            throw error
        }
        
        isLoading = true
        lastError = nil
        let previousStatus = subscriptionStatus
        
        do {
            // ‚úÖ Para upgrades, RevenueCat gerencia automaticamente
            // A compra normal j√° faz o upgrade se necess√°rio
            let customerInfo = try await revenueCatService.purchase(package)
            
            // ‚úÖ Atualizar status local
            await updateSubscriptionStatus(from: customerInfo)
            
            // ‚úÖ Sincronizar com usu√°rio atual se dispon√≠vel
            if let currentUser = getCurrentUser() {
                await updateUserSubscription(currentUser)
            }
            
            let newStatus = await parseSubscriptionStatus(from: customerInfo)
            
            let result = UpgradeResult(
                success: true,
                fromPackage: eligibility.currentPackage,
                toPackage: package,
                customerInfo: customerInfo,
                previousStatus: previousStatus,
                newStatus: newStatus,
                proratedRefund: eligibility.proratedRefund,
                message: "Upgrade realizado com sucesso! Novos recursos dispon√≠veis."
            )
            
            print("‚úÖ [SUBSCRIPTION] Upgrade conclu√≠do: \(previousStatus) ‚Üí \(newStatus)")
            isLoading = false
            return result
            
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro no upgrade: \(error)")
            isLoading = false
            lastError = error
            
            let result = UpgradeResult(
                success: false,
                fromPackage: eligibility.currentPackage,
                toPackage: package,
                customerInfo: nil,
                previousStatus: previousStatus,
                newStatus: subscriptionStatus,
                proratedRefund: 0.0,
                message: getErrorMessage(for: error)
            )
            
            throw SubscriptionError.upgradeFailed(error: error, result: result)
        }
    }
    
    /// Downgrade de assinatura com aviso sobre perda de recursos
    /// ‚úÖ Informa sobre recursos que ser√£o perdidos e timing
    func downgradeSubscription(to package: Package, showConfirmation: Bool = true) async throws -> DowngradeResult {
        print("‚¨áÔ∏è [SUBSCRIPTION] Downgrade para: \(package.storeProduct.localizedTitle)")
        
        // ‚úÖ Verificar elegibilidade para downgrade
        let eligibility = await canDowngrade(to: package)
        guard eligibility.canDowngrade else {
            let error = SubscriptionError.downgradeNotEligible(reason: eligibility.reason)
            lastError = error
            throw error
        }
        
        isLoading = true
        lastError = nil
        let previousStatus = subscriptionStatus
        
        do {
            // ‚úÖ Para downgrades, RevenueCat gerencia automaticamente
            // O downgrade entra em efeito no pr√≥ximo per√≠odo de cobran√ßa
            let customerInfo = try await revenueCatService.purchase(package)
            
            // ‚úÖ Atualizar status local
            await updateSubscriptionStatus(from: customerInfo)
            
            // ‚úÖ Sincronizar com usu√°rio atual se dispon√≠vel
            if let currentUser = getCurrentUser() {
                await updateUserSubscription(currentUser)
            }
            
            let newStatus = await parseSubscriptionStatus(from: customerInfo)
            
            let result = DowngradeResult(
                success: true,
                fromPackage: eligibility.currentPackage,
                toPackage: package,
                customerInfo: customerInfo,
                previousStatus: previousStatus,
                newStatus: newStatus,
                effectiveDate: eligibility.effectiveDate,
                featuresToLose: eligibility.featuresToLose,
                message: "Downgrade programado para \(eligibility.effectiveDate.formatted()). Recursos premium mantidos at√© l√°."
            )
            
            print("‚úÖ [SUBSCRIPTION] Downgrade programado: \(previousStatus) ‚Üí \(newStatus) em \(eligibility.effectiveDate)")
            isLoading = false
            return result
            
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro no downgrade: \(error)")
            isLoading = false
            lastError = error
            
            let result = DowngradeResult(
                success: false,
                fromPackage: eligibility.currentPackage,
                toPackage: package,
                customerInfo: nil,
                previousStatus: previousStatus,
                newStatus: subscriptionStatus,
                effectiveDate: Date(),
                featuresToLose: [],
                message: getErrorMessage(for: error)
            )
            
            throw SubscriptionError.downgradeFailed(error: error, result: result)
        }
    }
    
    /// Cancela assinatura com informa√ß√µes sobre acesso remanescente
    /// ‚úÖ Informa at√© quando o acesso premium permanece ativo
    func cancelSubscription(showConfirmation: Bool = true) async throws -> CancellationResult {
        print("‚ùå [SUBSCRIPTION] Cancelando assinatura...")
        
        isLoading = true
        lastError = nil
        let previousStatus = subscriptionStatus
        
        // ‚ö†Ô∏è NOTA: Cancelamento real deve ser feito via App Store
        // Este m√©todo apenas atualiza o status local e informa o usu√°rio
        
        do {
            let customerInfo = try await revenueCatService.getCustomerInfo()
            await updateSubscriptionStatus(from: customerInfo)
            
            let newStatus = await parseSubscriptionStatus(from: customerInfo)
            let accessUntil = customerInfo.entitlements.active["premium"]?.expirationDate
            
            let result = CancellationResult(
                success: true,
                customerInfo: customerInfo,
                previousStatus: previousStatus,
                newStatus: newStatus,
                accessUntil: accessUntil,
                canReactivate: accessUntil != nil && Date() < (accessUntil ?? Date()),
                message: accessUntil != nil ? 
                    "Cancelamento registrado. Acesso premium mantido at√© \(accessUntil!.formatted())." :
                    "Para cancelar, acesse Configura√ß√µes > Assinaturas no iOS."
            )
            
            print("‚úÖ [SUBSCRIPTION] Status de cancelamento atualizado")
            isLoading = false
            return result
            
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro ao verificar cancelamento: \(error)")
            isLoading = false
            lastError = error
            
            let result = CancellationResult(
                success: false,
                customerInfo: nil,
                previousStatus: previousStatus,
                newStatus: subscriptionStatus,
                accessUntil: nil,
                canReactivate: false,
                message: getErrorMessage(for: error)
            )
            
            throw SubscriptionError.cancellationFailed(error: error, result: result)
        }
    }
    
    /// Reativa assinatura expirada
    /// ‚úÖ Permite reativar assinatura que foi cancelada mas ainda n√£o expirou
    func reactivateSubscription(package: Package) async throws -> ReactivationResult {
        print("üîÑ [SUBSCRIPTION] Reativando assinatura: \(package.storeProduct.localizedTitle)")
        
        isLoading = true
        lastError = nil
        let previousStatus = subscriptionStatus
        
        do {
            let customerInfo = try await revenueCatService.purchase(package)
            
            // ‚úÖ Atualizar status local
            await updateSubscriptionStatus(from: customerInfo)
            
            // ‚úÖ Sincronizar com usu√°rio atual se dispon√≠vel
            if let currentUser = getCurrentUser() {
                await updateUserSubscription(currentUser)
            }
            
            let newStatus = await parseSubscriptionStatus(from: customerInfo)
            
            let result = ReactivationResult(
                success: true,
                package: package,
                customerInfo: customerInfo,
                previousStatus: previousStatus,
                newStatus: newStatus,
                message: "Assinatura reativada com sucesso! Bem-vindo de volta ao Premium!"
            )
            
            print("‚úÖ [SUBSCRIPTION] Assinatura reativada: \(previousStatus) ‚Üí \(newStatus)")
            isLoading = false
            return result
            
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro na reativa√ß√£o: \(error)")
            isLoading = false
            lastError = error
            
            let result = ReactivationResult(
                success: false,
                package: package,
                customerInfo: nil,
                previousStatus: previousStatus,
                newStatus: subscriptionStatus,
                message: getErrorMessage(for: error)
            )
            
            throw SubscriptionError.reactivationFailed(error: error, result: result)
        }
    }
    
    // MARK: - ITEM 63: Valida√ß√£o e Eligibilidade
    
    /// Verifica se usu√°rio pode comprar package espec√≠fico
    func canPurchase(_ package: Package) async -> PurchaseEligibility {
        // ‚úÖ Se j√° √© premium, s√≥ pode fazer upgrade
        if isPremium {
            return PurchaseEligibility(
                canPurchase: false,
                reason: "Voc√™ j√° possui uma assinatura ativa. Use a op√ß√£o de upgrade."
            )
        }
        
        // ‚úÖ Verificar se package existe nas offerings
        do {
            let offerings = try await revenueCatService.fetchOfferings()
            let availablePackages = offerings.current?.availablePackages ?? []
            
            guard availablePackages.contains(where: { $0.identifier == package.identifier }) else {
                return PurchaseEligibility(
                    canPurchase: false,
                    reason: "Este plano n√£o est√° mais dispon√≠vel."
                )
            }
            
            return PurchaseEligibility(
                canPurchase: true,
                reason: "Pronto para assinar!"
            )
        } catch {
            return PurchaseEligibility(
                canPurchase: false,
                reason: "Erro ao verificar ofertas dispon√≠veis."
            )
        }
    }
    
    /// Verifica se usu√°rio pode fazer upgrade para package espec√≠fico
    func canUpgrade(to package: Package) async -> UpgradeEligibility {
        guard isPremium else {
            return UpgradeEligibility(
                canUpgrade: false,
                reason: "Voc√™ precisa ter uma assinatura ativa para fazer upgrade."
            )
        }
        
        // ‚úÖ Verificar se √© realmente um upgrade
        let currentType = subscriptionStatus.type
        let targetType = getSubscriptionType(for: package)
        
        guard targetType.isUpgradeFrom(currentType) else {
            return UpgradeEligibility(
                canUpgrade: false,
                reason: "Este n√£o √© um upgrade v√°lido do seu plano atual."
            )
        }
        
        // ‚úÖ Calcular reembolso proporcional
        let proratedRefund = calculateProratedRefund(from: currentType, to: targetType)
        
        return UpgradeEligibility(
            canUpgrade: true,
            reason: "Upgrade dispon√≠vel com reembolso proporcional.",
            currentPackage: getCurrentPackage(),
            proratedRefund: proratedRefund
        )
    }
    
    /// Verifica se usu√°rio pode fazer downgrade para package espec√≠fico
    func canDowngrade(to package: Package) async -> DowngradeEligibility {
        guard isPremium else {
            return DowngradeEligibility(
                canDowngrade: false,
                reason: "Voc√™ precisa ter uma assinatura ativa para fazer downgrade."
            )
        }
        
        // ‚úÖ Verificar se √© realmente um downgrade
        let currentType = subscriptionStatus.type
        let targetType = getSubscriptionType(for: package)
        
        guard targetType.isDowngradeFrom(currentType) else {
            return DowngradeEligibility(
                canDowngrade: false,
                reason: "Este n√£o √© um downgrade v√°lido do seu plano atual."
            )
        }
        
        // ‚úÖ Calcular quando o downgrade entra em efeito
        let effectiveDate = getNextBillingDate() ?? Date()
        
        // ‚úÖ Listar recursos que ser√£o perdidos
        let featuresToLose = getFeaturesToLose(from: currentType, to: targetType)
        
        return DowngradeEligibility(
            canDowngrade: true,
            reason: "Downgrade ser√° efetivo no pr√≥ximo per√≠odo de cobran√ßa.",
            currentPackage: getCurrentPackage(),
            effectiveDate: effectiveDate,
            featuresToLose: featuresToLose
        )
    }
    
    /// Obt√©m packages recomendados baseado no uso do usu√°rio
    func getRecommendedPackages() async -> [Package] {
        do {
            let offerings = try await revenueCatService.fetchOfferings()
            let allPackages = offerings.current?.availablePackages ?? []
            
            // ‚úÖ Se n√£o √© premium, recomendar anual (melhor valor)
            if !isPremium {
                return allPackages.sorted { package1, package2 in
                    let type1 = getSubscriptionType(for: package1)
                    let type2 = getSubscriptionType(for: package2)
                    return type1 == .yearly // Priorizar anual
                }
            }
            
            // ‚úÖ Se j√° √© premium, recomendar upgrades
            return allPackages.filter { package in
                let type = getSubscriptionType(for: package)
                return type.isUpgradeFrom(subscriptionStatus.type)
            }
        } catch {
            print("‚ùå [SUBSCRIPTION] Erro ao buscar recomenda√ß√µes: \(error)")
            return []
        }
    }
    
    // MARK: - ITEM 63: Helper Methods
    
    /// Obt√©m mensagem de erro amig√°vel para usu√°rio
    private func getErrorMessage(for error: Error) -> String {
        if let revenueCatError = error as? RevenueCatError {
            return revenueCatError.errorDescription ?? "Erro desconhecido"
        }
        
        if error.localizedDescription.contains("cancelled") {
            return "Compra cancelada pelo usu√°rio"
        }
        
        if error.localizedDescription.contains("network") {
            return "Erro de conex√£o. Verifique sua internet e tente novamente."
        }
        
        return "Erro inesperado. Tente novamente em alguns momentos."
    }
    
    /// Obt√©m tipo de assinatura baseado no package
    private func getSubscriptionType(for package: Package) -> SubscriptionType {
        switch package.storeProduct.productIdentifier {
        case "fitter.monthly":
            return .monthly
        case "fitter.yearly":
            return .yearly
        case "fitter.lifetime":
            return .lifetime
        default:
            return .none
        }
    }
    
    /// Obt√©m package atual do usu√°rio (se premium)
    /// ‚úÖ Busca o package ativo baseado no customerInfo do RevenueCat
    private func getCurrentPackage() -> Package? {
        guard let customerInfo = revenueCatService.customerInfo,
              let premiumEntitlement = customerInfo.entitlements.active["premium"] else {
            return nil
        }
        
        // ‚úÖ Buscar package baseado no productIdentifier
        let productId = premiumEntitlement.productIdentifier
        
        // ‚úÖ Tentar buscar nas offerings atuais
        guard let offerings = revenueCatService.offerings else {
            return nil
        }
        
        return offerings.current?.availablePackages.first { package in
            package.storeProduct.productIdentifier == productId
        }
    }
    
    /// Calcula reembolso proporcional para upgrade
    /// ‚úÖ C√°lculo baseado no tempo restante da assinatura atual
    private func calculateProratedRefund(from: SubscriptionType, to: SubscriptionType) -> Double {
        guard let customerInfo = revenueCatService.customerInfo,
              let premiumEntitlement = customerInfo.entitlements.active["premium"],
              let expirationDate = premiumEntitlement.expirationDate else {
            return 0.0
        }
        
        // ‚úÖ Calcular dias restantes
        let now = Date()
        let daysRemaining = max(0, Calendar.current.dateComponents([.day], from: now, to: expirationDate).day ?? 0)
        
        // ‚úÖ Calcular reembolso baseado no tipo de assinatura
        let dailyValue: Double
        switch from {
        case .monthly:
            dailyValue = 9.99 / 30.0  // R$ 9,99 √∑ 30 dias
        case .yearly:
            dailyValue = 99.99 / 365.0  // R$ 99,99 √∑ 365 dias
        case .lifetime:
            return 0.0  // Sem reembolso para lifetime
        case .none:
            return 0.0
        }
        
        let refundAmount = dailyValue * Double(daysRemaining)
        
        print("üí∞ [SUBSCRIPTION] Reembolso calculado: R$ \(String(format: "%.2f", refundAmount)) para \(daysRemaining) dias")
        return refundAmount
    }
    
    /// Obt√©m pr√≥xima data de cobran√ßa
    /// ‚úÖ Busca a data real do customerInfo ou calcula baseado no per√≠odo
    private func getNextBillingDate() -> Date? {
        guard let customerInfo = revenueCatService.customerInfo,
              let premiumEntitlement = customerInfo.entitlements.active["premium"] else {
            return nil
        }
        
        // ‚úÖ Se h√° data de expira√ß√£o, essa √© a pr√≥xima cobran√ßa
        if let expirationDate = premiumEntitlement.expirationDate {
            return expirationDate
        }
        
        // ‚úÖ Fallback: calcular baseado no tipo de assinatura
        let calendar = Calendar.current
        let currentType = subscriptionStatus.type
        
        switch currentType {
        case .monthly:
            return calendar.date(byAdding: .month, value: 1, to: Date())
        case .yearly:
            return calendar.date(byAdding: .year, value: 1, to: Date())
        case .lifetime:
            return nil  // N√£o h√° pr√≥xima cobran√ßa para vital√≠cio
        case .none:
            return nil
        }
    }
    
    /// Lista recursos que ser√£o perdidos no downgrade
    /// ‚úÖ L√≥gica baseada nas diferen√ßas reais entre planos
    private func getFeaturesToLose(from: SubscriptionType, to: SubscriptionType) -> [String] {
        var featuresToLose: [String] = []
        
        // ‚úÖ Recursos perdidos de Premium para Free
        if to == .none {
            featuresToLose.append(contentsOf: [
                "Treinos ilimitados (m√°ximo 4 treinos)",
                "S√©ries ilimitadas (m√°ximo 3 s√©ries por exerc√≠cio)",
                "An√°lise detalhada de sensores",
                "Importa√ß√£o de treinos via c√¢mera/arquivo",
                "Sincroniza√ß√£o em nuvem avan√ßada",
                "Gr√°ficos e estat√≠sticas completas",
                "Dados de heart rate e calorias",
                "Localiza√ß√£o dos treinos"
            ])
        }
        
        // ‚úÖ Recursos perdidos de Anual para Mensal
        if from == .yearly && to == .monthly {
            featuresToLose.append(contentsOf: [
                "Desconto do plano anual",
                "Prioridade no suporte"
            ])
        }
        
        // ‚úÖ Recursos perdidos de Vital√≠cio para qualquer outro
        if from == .lifetime {
            featuresToLose.append(contentsOf: [
                "Acesso vital√≠cio sem cobran√ßa recorrente",
                "Todas as funcionalidades futuras inclu√≠das",
                "Prioridade m√°xima no suporte"
            ])
        }
        
        return featuresToLose
    }
    
    // MARK: - ‚ö†Ô∏è SISTEMA ADMIN - REMOVER ANTES DO LAN√áAMENTO
    
    /// Obt√©m usu√°rio atual (para verifica√ß√£o admin)
    /// ‚úÖ M√©todo auxiliar para verificar se usu√°rio atual √© admin
    /// ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Sistema de admin apenas para desenvolvimento
    private func getCurrentUser() -> CDAppUser? {
        // ‚úÖ Buscar usu√°rio atual no Core Data
        // Voc√™ pode implementar isso baseado na sua l√≥gica de AuthUseCase
        // Por enquanto, retorna nil (ser√° implementado quando integrar com AuthUseCase)
        return nil
    }
    
    /// Verifica se o usu√°rio √© admin/teste para bypass do RevenueCat
    /// ‚úÖ Para desenvolvimento e testes sem App Store Connect
    /// ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Sistema de admin apenas para desenvolvimento
    func isAdminUser(_ user: CDAppUser) async -> Bool {
        // ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Lista de emails admin apenas para desenvolvimento
        // ‚úÖ Lista de emails admin (voc√™ pode adicionar o seu)
        let adminEmails = [
            "daniel@example.com",  // Substitua pelo seu email
            "admin@fitter.com",
            "test@fitter.com"
        ]
        
        // ‚úÖ Verificar por email
        if let userEmail = user.email, adminEmails.contains(userEmail.lowercased()) {
            return true
        }
        
        // ‚ö†Ô∏è REMOVER ANTES DO LAN√áAMENTO: Lista de IDs admin apenas para desenvolvimento
        // ‚úÖ Verificar por ID espec√≠fico (se necess√°rio)
        let adminUserIds = [
            "V4pKs83V1Dc2yElHZB0ns2PbrIN2",  // Substitua pelos IDs que voc√™ quiser
            "ADMIN_USER_ID_2"
        ]
        
        if adminUserIds.contains(user.id.uuidString) {
            return true
        }
        
        // ‚úÖ Verificar campo customizado no Firestore (se existir)
        // Voc√™ pode adicionar um campo "isAdmin" no Firestore
        // e verificar aqui se necess√°rio
        
        return false
    }
    
    // MARK: - Private Methods (Produ√ß√£o)
    
    /// Atualiza dados de assinatura do usu√°rio no Core Data
    private func updateUserSubscription(_ user: CDAppUser, with status: SubscriptionStatus) async {
        await coreDataService.performBackgroundTask { context in
            // ‚úÖ Buscar usu√°rio no contexto de background
            guard let backgroundUser = context.object(with: user.objectID) as? CDAppUser else {
                print("‚ùå [SUBSCRIPTION] Usu√°rio n√£o encontrado no contexto de background")
                return
            }
            
            // ‚úÖ Atualizar campos de assinatura
            backgroundUser.subscriptionType = status.type.rawValue
            
            switch status {
            case .active(_, let expiresAt):
                backgroundUser.subscriptionValidUntil = expiresAt
                backgroundUser.subscriptionStartDate = Date()
            case .expired(_, let expiredAt):
                backgroundUser.subscriptionValidUntil = expiredAt
            case .gracePeriod(_, let expiresAt):
                backgroundUser.subscriptionValidUntil = expiresAt
            case .none:
                backgroundUser.subscriptionValidUntil = nil
                backgroundUser.subscriptionStartDate = nil
            }
            
            // ‚úÖ Salvar mudan√ßas
            do {
                try context.save()
                print("‚úÖ [SUBSCRIPTION] Usu√°rio salvo no Core Data: \(status)")
            } catch {
                print("‚ùå [SUBSCRIPTION] Erro ao salvar usu√°rio: \(error)")
            }
        }
    }
}

// MARK: - SubscriptionStatus

/// Status detalhado da assinatura do usu√°rio
/// ‚úÖ Defini√ß√£o centralizada em SubscriptionType.swift - duplica√ß√£o removida 

// MARK: - ITEM 63: Result Types

/// Resultado de uma compra
struct PurchaseResult {
    let success: Bool
    let package: Package
    let customerInfo: CustomerInfo?
    let previousStatus: SubscriptionStatus
    let newStatus: SubscriptionStatus
    let message: String
}

/// Resultado de restore de compras
struct RestoreResult {
    let success: Bool
    let customerInfo: CustomerInfo?
    let previousStatus: SubscriptionStatus
    let newStatus: SubscriptionStatus
    let hasActivePurchases: Bool
    let message: String
}

/// Resultado de upgrade
struct UpgradeResult {
    let success: Bool
    let fromPackage: Package?
    let toPackage: Package
    let customerInfo: CustomerInfo?
    let previousStatus: SubscriptionStatus
    let newStatus: SubscriptionStatus
    let proratedRefund: Double
    let message: String
}

/// Resultado de downgrade
struct DowngradeResult {
    let success: Bool
    let fromPackage: Package?
    let toPackage: Package
    let customerInfo: CustomerInfo?
    let previousStatus: SubscriptionStatus
    let newStatus: SubscriptionStatus
    let effectiveDate: Date
    let featuresToLose: [String]
    let message: String
}

/// Resultado de cancelamento
struct CancellationResult {
    let success: Bool
    let customerInfo: CustomerInfo?
    let previousStatus: SubscriptionStatus
    let newStatus: SubscriptionStatus
    let accessUntil: Date?
    let canReactivate: Bool
    let message: String
}

/// Resultado de reativa√ß√£o
struct ReactivationResult {
    let success: Bool
    let package: Package
    let customerInfo: CustomerInfo?
    let previousStatus: SubscriptionStatus
    let newStatus: SubscriptionStatus
    let message: String
}

// MARK: - ITEM 63: Eligibility Types

/// Elegibilidade para compra
struct PurchaseEligibility {
    let canPurchase: Bool
    let reason: String
}

/// Elegibilidade para upgrade
struct UpgradeEligibility {
    let canUpgrade: Bool
    let reason: String
    let currentPackage: Package?
    let proratedRefund: Double
    
    init(canUpgrade: Bool, reason: String, currentPackage: Package? = nil, proratedRefund: Double = 0.0) {
        self.canUpgrade = canUpgrade
        self.reason = reason
        self.currentPackage = currentPackage
        self.proratedRefund = proratedRefund
    }
}

/// Elegibilidade para downgrade
struct DowngradeEligibility {
    let canDowngrade: Bool
    let reason: String
    let currentPackage: Package?
    let effectiveDate: Date
    let featuresToLose: [String]
    
    init(canDowngrade: Bool, reason: String, currentPackage: Package? = nil, effectiveDate: Date = Date(), featuresToLose: [String] = []) {
        self.canDowngrade = canDowngrade
        self.reason = reason
        self.currentPackage = currentPackage
        self.effectiveDate = effectiveDate
        self.featuresToLose = featuresToLose
    }
}

// MARK: - ITEM 63: Error Types

enum SubscriptionError: LocalizedError {
    case purchaseNotEligible(reason: String)
    case purchaseFailed(error: Error, result: PurchaseResult)
    case restoreFailed(error: Error, result: RestoreResult)
    case upgradeNotEligible(reason: String)
    case upgradeFailed(error: Error, result: UpgradeResult)
    case downgradeNotEligible(reason: String)
    case downgradeFailed(error: Error, result: DowngradeResult)
    case cancellationFailed(error: Error, result: CancellationResult)
    case reactivationFailed(error: Error, result: ReactivationResult)
    
    var errorDescription: String? {
        switch self {
        case .purchaseNotEligible(let reason):
            return "Compra n√£o permitida: \(reason)"
        case .purchaseFailed(_, let result):
            return "Falha na compra: \(result.message)"
        case .restoreFailed(_, let result):
            return "Falha ao restaurar: \(result.message)"
        case .upgradeNotEligible(let reason):
            return "Upgrade n√£o permitido: \(reason)"
        case .upgradeFailed(_, let result):
            return "Falha no upgrade: \(result.message)"
        case .downgradeNotEligible(let reason):
            return "Downgrade n√£o permitido: \(reason)"
        case .downgradeFailed(_, let result):
            return "Falha no downgrade: \(result.message)"
        case .cancellationFailed(_, let result):
            return "Falha no cancelamento: \(result.message)"
        case .reactivationFailed(_, let result):
            return "Falha na reativa√ß√£o: \(result.message)"
        }
    }
}

// MARK: - ITEM 63: SubscriptionType Extensions

extension SubscriptionType {
    /// Verifica se este tipo √© um upgrade do tipo fornecido
    func isUpgradeFrom(_ other: SubscriptionType) -> Bool {
        switch (other, self) {
        case (.none, .monthly), (.none, .yearly), (.none, .lifetime):
            return true
        case (.monthly, .yearly), (.monthly, .lifetime):
            return true
        case (.yearly, .lifetime):
            return true
        default:
            return false
        }
    }
    
    /// Verifica se este tipo √© um downgrade do tipo fornecido
    func isDowngradeFrom(_ other: SubscriptionType) -> Bool {
        switch (other, self) {
        case (.monthly, .none), (.yearly, .none), (.lifetime, .none):
            return true
        case (.yearly, .monthly), (.lifetime, .monthly):
            return true
        case (.lifetime, .yearly):
            return true
        default:
            return false
        }
    }
}

// MARK: - Core Data Extensions

/// Extens√£o para CDAppUser com computed property para SubscriptionStatus
extension CDAppUser {
    /// ‚úÖ Converte dados do Core Data para SubscriptionStatus
    var subscriptionStatus: SubscriptionStatus? {
        // ‚úÖ Converter dados do Core Data para SubscriptionStatus
        guard let type = SubscriptionType(rawValue: self.subscriptionType) else {
            return .none
        }
        
        if type == .none {
            return .none
        }
        
        // ‚úÖ Verificar se h√° data de expira√ß√£o
        guard let validUntil = self.subscriptionValidUntil else {
            if type == .lifetime {
                return .active(type: type, expiresAt: Date.distantFuture)
            }
            return .none
        }
        
        // ‚úÖ Verificar se ainda est√° ativo
        let now = Date()
        if now < validUntil {
            return .active(type: type, expiresAt: validUntil)
        } else {
            return .expired(type: type, expiredAt: validUntil)
        }
    }
    
    // Note: safeName est√° definido em CoreDataModels.swift
} 