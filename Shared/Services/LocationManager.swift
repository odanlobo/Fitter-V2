//
//  LocationManager.swift
//  Fitter V2
//
//  üó∫Ô∏è LOCATION MANAGER - CLEAN ARCHITECTURE COM TRATAMENTO DE PERMISS√ïES
//  
//  üéØ RESPONSABILIDADES:
//  ‚Ä¢ Solicitar permiss√£o de localiza√ß√£o de forma transparente
//  ‚Ä¢ Capturar localiza√ß√£o durante in√≠cio de treinos (opcional)
//  ‚Ä¢ Funcionar corretamente quando usu√°rio nega permiss√£o
//  ‚Ä¢ Integrar com CDCurrentSession e CDWorkoutHistory
//  ‚Ä¢ Seguir diretrizes de privacidade da Apple
//  
//  üîí PRIVACIDADE E UX:
//  ‚Ä¢ Permiss√£o √© completamente opcional
//  ‚Ä¢ App funciona normalmente sem localiza√ß√£o
//  ‚Ä¢ Explica√ß√£o clara do uso da localiza√ß√£o
//  ‚Ä¢ N√£o bloqueia fluxo de treino
//  
//  üèóÔ∏è ARQUITETURA:
//  ‚Ä¢ Protocol para testabilidade e DI
//  ‚Ä¢ Publishers para estado reativo
//  ‚Ä¢ Async/await para opera√ß√µes n√£o-bloqueantes
//  ‚Ä¢ Error handling robusto
//
//  Created by Daniel Lobo on 25/05/25.
//

import Foundation
import CoreLocation
import Combine

// MARK: - Location Manager Protocol

/// Protocol para gerenciamento de localiza√ß√£o
/// Permite inje√ß√£o de depend√™ncias e testabilidade
protocol LocationManagerProtocol: ObservableObject {
    var authorizationStatus: CLAuthorizationStatus { get }
    var isLocationAuthorized: Bool { get }
    var currentLocation: CLLocation? { get }
    var lastError: Error? { get }
    
    // Publishers para estado reativo
    var authorizationStatusPublisher: AnyPublisher<CLAuthorizationStatus, Never> { get }
    var locationPublisher: AnyPublisher<CLLocation?, Never> { get }
    
    func requestPermission() async -> Bool
    func requestSingleLocation() async -> CLLocation?
    func startMonitoring()
    func stopMonitoring()
}

// MARK: - Location Manager Errors

enum LocationManagerError: LocalizedError {
    case permissionDenied
    case locationNotAvailable
    case timeout
    case unknownError(Error)
    
    var errorDescription: String? {
        switch self {
        case .permissionDenied:
            return "Permiss√£o de localiza√ß√£o negada pelo usu√°rio"
        case .locationNotAvailable:
            return "Localiza√ß√£o n√£o dispon√≠vel no momento"
        case .timeout:
            return "Timeout ao obter localiza√ß√£o"
        case .unknownError(let error):
            return "Erro de localiza√ß√£o: \(error.localizedDescription)"
        }
    }
}

// MARK: - Location Manager Implementation

/// Manager dedicado para captura de localiza√ß√£o durante treinos
/// 
/// **Filosofia de Design:**
/// - Localiza√ß√£o √© OPCIONAL e n√£o bloqueia funcionalidades
/// - Permiss√£o solicitada de forma transparente e educativa
/// - App funciona perfeitamente sem localiza√ß√£o
/// - Dados de localiza√ß√£o enriquecem a experi√™ncia quando dispon√≠veis
/// 
/// **Integra√ß√£o:**
/// - Usado pelo StartWorkoutUseCase para capturar localiza√ß√£o no in√≠cio do treino
/// - Dados salvos em CDCurrentSession e migrados para CDWorkoutHistory
/// - Publishers permitem UI reativa baseada no status de permiss√£o
final class LocationManager: NSObject, LocationManagerProtocol {
    
    // MARK: - Properties
    
    /// Core Location manager
    private let locationManager = CLLocationManager()
    
    /// Status atual de autoriza√ß√£o
    @Published private(set) var authorizationStatus: CLAuthorizationStatus = .notDetermined
    
    /// Localiza√ß√£o atual capturada
    @Published private(set) var currentLocation: CLLocation?
    
    /// √öltimo erro ocorrido
    @Published private(set) var lastError: Error?
    
    /// Cancellables para publishers
    private var cancellables = Set<AnyCancellable>()
    
    /// Timer para timeout de localiza√ß√£o
    private var locationTimeout: Timer?
    
    /// Continuation para opera√ß√µes async
    private var locationContinuation: CheckedContinuation<CLLocation?, Error>?
    
    // MARK: - Computed Properties
    
    /// Verifica se localiza√ß√£o est√° autorizada
    var isLocationAuthorized: Bool {
        return authorizationStatus == .authorizedWhenInUse || authorizationStatus == .authorizedAlways
    }
    
    /// Publisher para status de autoriza√ß√£o
    var authorizationStatusPublisher: AnyPublisher<CLAuthorizationStatus, Never> {
        $authorizationStatus.eraseToAnyPublisher()
    }
    
    /// Publisher para localiza√ß√£o
    var locationPublisher: AnyPublisher<CLLocation?, Never> {
        $currentLocation.eraseToAnyPublisher()
    }
    
    // MARK: - Initialization
    
    override init() {
        super.init()
        setupLocationManager()
        updateAuthorizationStatus()
    }
    
    // MARK: - Setup
    
    /// Configura o location manager
    private func setupLocationManager() {
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        locationManager.distanceFilter = 10.0 // Atualizar a cada 10 metros
        
        print("üìç [LocationManager] Configurado com precis√£o de 10 metros")
    }
    
    /// Atualiza status de autoriza√ß√£o inicial
    private func updateAuthorizationStatus() {
        authorizationStatus = locationManager.authorizationStatus
        print("üìç [LocationManager] Status inicial: \(authorizationStatusDescription)")
    }
    
    // MARK: - Permission Management
    
    /// Solicita permiss√£o de localiza√ß√£o ao usu√°rio
    /// 
    /// **Fluxo:**
    /// 1. Verifica se j√° est√° autorizado
    /// 2. Solicita permiss√£o quando em uso (n√£o sempre)
    /// 3. Aguarda resposta do usu√°rio via delegate
    /// 4. Retorna resultado sem bloquear o app
    /// 
    /// - Returns: True se autorizado, false caso contr√°rio
    func requestPermission() async -> Bool {
        // J√° autorizado
        if isLocationAuthorized {
            print("‚úÖ [LocationManager] Localiza√ß√£o j√° autorizada")
            return true
        }
        
        // Negado permanentemente
        if authorizationStatus == .denied {
            print("‚ùå [LocationManager] Localiza√ß√£o negada permanentemente")
            lastError = LocationManagerError.permissionDenied
            return false
        }
        
        // Solicitar permiss√£o
        print("üîÑ [LocationManager] Solicitando permiss√£o de localiza√ß√£o...")
        
        return await withCheckedContinuation { continuation in
            // Configurar observador para mudan√ßa de status
            let cancellable = $authorizationStatus
                .dropFirst() // Ignora valor atual
                .sink { status in
                    switch status {
                    case .authorizedWhenInUse, .authorizedAlways:
                        print("‚úÖ [LocationManager] Permiss√£o concedida")
                        continuation.resume(returning: true)
                    case .denied, .restricted:
                        print("‚ùå [LocationManager] Permiss√£o negada")
                        self.lastError = LocationManagerError.permissionDenied
                        continuation.resume(returning: false)
                    default:
                        break
                    }
                }
            
            // Armazenar cancellable temporariamente
            cancellables.insert(cancellable)
            
            // Solicitar permiss√£o
            locationManager.requestWhenInUseAuthorization()
            
            // Timeout ap√≥s 10 segundos
            DispatchQueue.main.asyncAfter(deadline: .now() + 10) {
                cancellable.cancel()
                if !self.isLocationAuthorized {
                    print("‚è∞ [LocationManager] Timeout na solicita√ß√£o de permiss√£o")
                    continuation.resume(returning: false)
                }
            }
        }
    }
    
    // MARK: - Location Capture
    
    /// Solicita uma √∫nica localiza√ß√£o (para in√≠cio de treino)
    /// 
    /// **Uso T√≠pico:**
    /// - Chamado pelo StartWorkoutUseCase no in√≠cio do treino
    /// - N√£o bloqueia o treino se falhar
    /// - Timeout de 15 segundos para n√£o prejudicar UX
    /// 
    /// - Returns: CLLocation se obtida, nil se falhar ou n√£o autorizado
    func requestSingleLocation() async -> CLLocation? {
        // Verificar autoriza√ß√£o
        guard isLocationAuthorized else {
            print("‚ö†Ô∏è [LocationManager] Localiza√ß√£o n√£o autorizada - continuando sem localiza√ß√£o")
            return nil
        }
        
        // Verificar disponibilidade
        guard CLLocationManager.locationServicesEnabled() else {
            print("‚ö†Ô∏è [LocationManager] Servi√ßos de localiza√ß√£o desabilitados")
            lastError = LocationManagerError.locationNotAvailable
            return nil
        }
        
        print("üîÑ [LocationManager] Solicitando localiza√ß√£o √∫nica...")
        
        return await withCheckedContinuation { continuation in
            locationContinuation = continuation
            
            // Configurar timeout de 15 segundos
            locationTimeout = Timer.scheduledTimer(withTimeInterval: 15.0, repeats: false) { _ in
                print("‚è∞ [LocationManager] Timeout ao obter localiza√ß√£o")
                self.lastError = LocationManagerError.timeout
                continuation.resume(returning: nil)
                self.locationContinuation = nil
            }
            
            // Solicitar localiza√ß√£o
            locationManager.requestLocation()
        }
    }
    
    /// Inicia monitoramento cont√≠nuo de localiza√ß√£o
    /// 
    /// **Nota:** Usado apenas se necess√°rio para funcionalidades avan√ßadas
    /// Por padr√£o, o app usa apenas localiza√ß√£o √∫nica no in√≠cio do treino
    func startMonitoring() {
        guard isLocationAuthorized else {
            print("‚ö†Ô∏è [LocationManager] N√£o √© poss√≠vel monitorar - permiss√£o n√£o concedida")
            return
        }
        
        print("üîÑ [LocationManager] Iniciando monitoramento cont√≠nuo")
        locationManager.startUpdatingLocation()
    }
    
    /// Para monitoramento cont√≠nuo
    func stopMonitoring() {
        print("‚èπÔ∏è [LocationManager] Parando monitoramento")
        locationManager.stopUpdatingLocation()
        locationTimeout?.invalidate()
        locationTimeout = nil
    }
    
    // MARK: - Utility
    
    /// Descri√ß√£o leg√≠vel do status de autoriza√ß√£o
    private var authorizationStatusDescription: String {
        switch authorizationStatus {
        case .notDetermined: return "N√£o determinado"
        case .restricted: return "Restrito"
        case .denied: return "Negado"
        case .authorizedAlways: return "Autorizado sempre"
        case .authorizedWhenInUse: return "Autorizado quando em uso"
        @unknown default: return "Desconhecido"
        }
    }
}

// MARK: - CLLocationManagerDelegate

extension LocationManager: CLLocationManagerDelegate {
    
    /// Resposta √† mudan√ßa de autoriza√ß√£o
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        print("üìç [LocationManager] Status alterado para: \(authorizationStatusDescription)")
        authorizationStatus = status
        
        // Limpar erro se autorizado
        if isLocationAuthorized {
            lastError = nil
        }
    }
    
    /// Localiza√ß√£o obtida com sucesso
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let location = locations.last else { return }
        
        print("‚úÖ [LocationManager] Localiza√ß√£o obtida: \(location.coordinate.latitude), \(location.coordinate.longitude)")
        print("üìè [LocationManager] Precis√£o: ¬±\(location.horizontalAccuracy)m")
        
        currentLocation = location
        lastError = nil
        
        // Resolver continuation se existir
        if let continuation = locationContinuation {
            locationTimeout?.invalidate()
            locationTimeout = nil
            continuation.resume(returning: location)
            locationContinuation = nil
        }
        
        // Parar updates para economizar bateria (single location)
        locationManager.stopUpdatingLocation()
    }
    
    /// Erro ao obter localiza√ß√£o
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("‚ùå [LocationManager] Erro: \(error.localizedDescription)")
        
        let locationError: LocationManagerError
        if let clError = error as? CLError {
            switch clError.code {
            case .denied:
                locationError = .permissionDenied
            case .locationUnknown, .network:
                locationError = .locationNotAvailable
            default:
                locationError = .unknownError(error)
            }
        } else {
            locationError = .unknownError(error)
        }
        
        lastError = locationError
        
        // Resolver continuation com nil se existir
        if let continuation = locationContinuation {
            locationTimeout?.invalidate()
            locationTimeout = nil
            continuation.resume(returning: nil)
            locationContinuation = nil
        }
    }
} 