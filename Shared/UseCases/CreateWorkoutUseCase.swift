/*
 * CreateWorkoutUseCase.swift
 * Fitter V2
 *
 * RESPONSABILIDADE: Use Case para cria√ß√£o de novos planos de treino.
 *                   Implementa Clean Architecture com orquestra√ß√£o de opera√ß√µes de persist√™ncia e sincroniza√ß√£o.
 *
 * ARQUITETURA:
 * - Orquestra WorkoutDataService (persist√™ncia local)
 * - Orquestra SyncWorkoutUseCase (sincroniza√ß√£o remota)
 * - N√ÉO acessa Core Data diretamente
 * - N√ÉO cont√©m l√≥gica de UI
 *
 * DEPEND√äNCIAS:
 * - WorkoutDataServiceProtocol: CRUD de planos de treino
 * - SyncWorkoutUseCaseProtocol: Sincroniza√ß√£o remota (item 23)
 *
 * FLUXO DE EXECU√á√ÉO:
 * 1. Valida√ß√£o de entrada
 * 2. Gera√ß√£o do t√≠tulo autom√°tico (sempre)
 * 3. Cria√ß√£o via WorkoutDataService (autoTitle + customTitle opcional)
 * 4. Sincroniza√ß√£o via SyncWorkoutUseCase
 * 5. Retorno do resultado
 *
 * SISTEMA DUAL DE T√çTULOS:
 * - autoTitle: Sempre "Treino A", "Treino B", "Treino A1"... (sistem√°tico, n√£o edit√°vel)
 * - customTitle: Totalmente livre - "Peitoral Heavy", "Push Day"... (sem palavra "Treino")
 * - Exibi√ß√£o: "Peitoral Heavy (Treino A)" ou apenas "Treino A"
 *
 * EXEMPLOS PR√ÅTICOS:
 * - 1¬∫ treino sem customiza√ß√£o ‚Üí autoTitle: "Treino A" ‚Üí displayTitle: "Treino A"
 * - 2¬∫ treino com "Peitoral Heavy" ‚Üí autoTitle: "Treino B" ‚Üí displayTitle: "Peitoral Heavy (Treino B)"
 * - 27¬∫ treino com "Leg Killer" ‚Üí autoTitle: "Treino A1" ‚Üí displayTitle: "Leg Killer (Treino A1)"
 * 
 * GERA√á√ÉO AUTOM√ÅTICA DE T√çTULOS:
 * - L√≥gica melhorada baseada no CreateWorkoutView
 * - Treino A, B, C... at√© Z (26 primeiros)
 * - Treino A1, B1, C1... Z1 (27¬∫ ao 52¬∫)
 * - Treino A2, B2, C2... Z2 (53¬∫ ao 78¬∫)
 * - Padr√£o infinito: Letter + Cycle Number
 * - Fallback com timestamp em caso de erro
 *
 * PADR√ïES:
 * - Protocol + Implementation para testabilidade
 * - Dependency Injection via inicializador
 * - Error handling espec√≠fico do dom√≠nio
 * - Async/await para opera√ß√µes ass√≠ncronas
 *
 * REFATORA√á√ÉO ITEM 17/47:
 * ‚úÖ Use Case de cria√ß√£o com orquestra√ß√£o
 * ‚úÖ Inje√ß√£o de WorkoutDataService
 * ‚úÖ Preparado para SyncWorkoutUseCase (item 23)
 * ‚úÖ Clean Architecture - sem acesso direto ao Core Data
 * ‚úÖ Tratamento de erros espec√≠ficos do dom√≠nio
 */

import Foundation

// MARK: - CreateWorkoutError

enum CreateWorkoutError: Error, LocalizedError {
    case invalidInput(String)
    case creationFailed(Error)
    case syncFailed(Error)
    
    var errorDescription: String? {
        switch self {
        case .invalidInput(let message):
            return "Dados inv√°lidos para cria√ß√£o do treino: \(message)"
        case .creationFailed(let error):
            return "Falha na cria√ß√£o do treino: \(error.localizedDescription)"
        case .syncFailed(let error):
            return "Falha na sincroniza√ß√£o do treino: \(error.localizedDescription)"
        }
    }
}

// MARK: - CreateWorkoutInput

struct CreateWorkoutInput {
    let title: String?  // T√≠tulo TOTALMENTE LIVRE - "Peitoral Heavy", "Push Day"... (opcional)
    let muscleGroups: String?
    let user: CDAppUser  // ‚úÖ LOGIN OBRIGAT√ìRIO - BaseViewModel.currentUser nunca nil
    let exerciseTemplates: [CDExerciseTemplate]
    
    /// Valida√ß√£o dos dados de entrada
    func validate() throws {
        // Se t√≠tulo personalizado fornecido, validar (pode ser qualquer coisa)
        if let title = title {
            guard !title.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
                throw CreateWorkoutError.invalidInput("T√≠tulo personalizado n√£o pode estar vazio")
            }
            
            guard title.count <= 50 else {
                throw CreateWorkoutError.invalidInput("T√≠tulo personalizado n√£o pode ter mais de 50 caracteres")
            }
        }
        
        guard !exerciseTemplates.isEmpty else {
            throw CreateWorkoutError.invalidInput("Treino deve conter pelo menos um exerc√≠cio")
        }
        
        guard exerciseTemplates.count <= 20 else {
            throw CreateWorkoutError.invalidInput("Treino n√£o pode ter mais de 20 exerc√≠cios")
        }
    }
}

// MARK: - CreateWorkoutOutput

struct CreateWorkoutOutput {
    let workoutPlan: CDWorkoutPlan
    let planExercises: [CDPlanExercise]
    let syncStatus: CreateWorkoutSyncStatus
}

enum CreateWorkoutSyncStatus {
    case synced
    case pending
    case failed(Error)
    case disabled // Quando SyncWorkoutUseCase n√£o est√° dispon√≠vel
}

// MARK: - CreateWorkoutUseCaseProtocol

protocol CreateWorkoutUseCaseProtocol {
    func execute(_ input: CreateWorkoutInput) async throws -> CreateWorkoutOutput
}

// SyncWorkoutUseCaseProtocol removed - now using real implementation from item 23

// MARK: - CreateWorkoutUseCase

final class CreateWorkoutUseCase: CreateWorkoutUseCaseProtocol {
    
    // MARK: - Properties
    
    private let workoutDataService: WorkoutDataServiceProtocol
    private let syncUseCase: SyncWorkoutUseCaseProtocol?
    
    // MARK: - Initialization
    
    init(
        workoutDataService: WorkoutDataServiceProtocol,
        syncUseCase: SyncWorkoutUseCaseProtocol? = nil // Optional for testing - should be provided in production
    ) {
        self.workoutDataService = workoutDataService
        self.syncUseCase = syncUseCase
        
        print("üèãÔ∏è‚Äç‚ôÇÔ∏è CreateWorkoutUseCase inicializado")
    }
    
    // MARK: - Public Methods
    
    func execute(_ input: CreateWorkoutInput) async throws -> CreateWorkoutOutput {
        let titleDisplay = input.title ?? "autom√°tico"
        print("üÜï Iniciando cria√ß√£o de treino: \(titleDisplay)")
        
        do {
            // 1. Validar entrada
            try input.validate()
            print("‚úÖ Valida√ß√£o de entrada conclu√≠da")
            
            // 2. Criar plano de treino via WorkoutDataService
            let workoutPlan = try await createWorkoutPlan(input)
            print("‚úÖ Plano de treino criado: \(workoutPlan.displayTitle)")
            
            // 4. Adicionar exerc√≠cios ao plano
            let planExercises = try await addExercisesToPlan(workoutPlan, exercises: input.exerciseTemplates)
            print("‚úÖ \(planExercises.count) exerc√≠cios adicionados ao plano")
            
            // 5. Tentar sincroniza√ß√£o (se dispon√≠vel)
            let syncStatus = await attemptSync(workoutPlan)
            
            let output = CreateWorkoutOutput(
                workoutPlan: workoutPlan,
                planExercises: planExercises,
                syncStatus: syncStatus
            )
            
            print("üéâ Treino criado com sucesso: \(workoutPlan.displayTitle)")
            return output
            
        } catch let error as CreateWorkoutError {
            print("‚ùå Erro na cria√ß√£o do treino: \(error.localizedDescription)")
            throw error
        } catch {
            print("‚ùå Erro inesperado na cria√ß√£o do treino: \(error)")
            throw CreateWorkoutError.creationFailed(error)
        }
    }
    
    // MARK: - Private Methods
    
    private func createWorkoutPlan(_ input: CreateWorkoutInput) async throws -> CDWorkoutPlan {
        do {
            // Gerar t√≠tulo autom√°tico baseado na quantidade de planos
            let autoTitle = try await generateAutoTitleForUser(input.user)
            
            return try await workoutDataService.createWorkoutPlan(
                autoTitle: autoTitle,
                customTitle: input.title,
                muscleGroups: input.muscleGroups,
                user: input.user
            )
        } catch {
            throw CreateWorkoutError.creationFailed(error)
        }
    }
    
    /// Gera t√≠tulo autom√°tico para o usu√°rio baseado na quantidade de planos existentes
    /// Mant√©m a l√≥gica robusta: Treino A, B, C... A1, B1, C1...
    private func generateAutoTitleForUser(_ user: CDAppUser) async throws -> String {
        do {
            let existingPlans = try await workoutDataService.fetchWorkoutPlans(for: user)
            return generateAutomaticTitle(basedOnCount: existingPlans.count)
        } catch {
            print("‚ö†Ô∏è Erro ao buscar planos existentes para gera√ß√£o de t√≠tulo autom√°tico: \(error)")
            // Fallback: usar timestamp
            let formatter = DateFormatter()
            formatter.dateFormat = "dd/MM HH:mm"
            return "Treino \(formatter.string(from: Date()))"
        }
    }
    
    /// Gera t√≠tulo autom√°tico seguindo a l√≥gica melhorada
    /// Treino A, B, C... at√© Z, depois Treino A1, B1, C1... Z1, A2, B2...
    private func generateAutomaticTitle(basedOnCount count: Int) -> String {
        let letters = Array("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        
        if count < letters.count {
            // Primeiros 26: A, B, C... Z
            return "Treino \(letters[count])"
        } else {
            // A partir do 27¬∫: A1, B1, C1... Z1, A2, B2...
            let cycle = (count - letters.count) / letters.count + 1  // 1, 2, 3...
            let letterIndex = (count - letters.count) % letters.count // 0, 1, 2... 25, 0, 1...
            return "Treino \(letters[letterIndex])\(cycle)"
        }
    }
    
    private func addExercisesToPlan(_ plan: CDWorkoutPlan, exercises: [CDExerciseTemplate]) async throws -> [CDPlanExercise] {
        var planExercises: [CDPlanExercise] = []
        
        for (index, exercise) in exercises.enumerated() {
            do {
                let planExercise = try await workoutDataService.addExerciseTemplate(
                    exercise,
                    to: plan,
                    order: Int32(index)
                )
                planExercises.append(planExercise)
            } catch {
                // Se falhar, tentar limpar exerc√≠cios j√° adicionados
                await cleanupPartialCreation(planExercises)
                throw CreateWorkoutError.creationFailed(error)
            }
        }
        
        return planExercises
    }
    
    private func attemptSync(_ workoutPlan: CDWorkoutPlan) async -> CreateWorkoutSyncStatus {
        guard let syncUseCase = syncUseCase else {
            print("‚ö†Ô∏è SyncWorkoutUseCase n√£o dispon√≠vel - sincroniza√ß√£o desabilitada")
            return .disabled
        }
        
        do {
            try await syncUseCase.execute(workoutPlan)
            print("‚òÅÔ∏è Treino sincronizado com sucesso")
            return .synced
        } catch {
            print("‚ö†Ô∏è Falha na sincroniza√ß√£o do treino: \(error)")
            return .failed(error)
        }
    }
    
    private func cleanupPartialCreation(_ planExercises: [CDPlanExercise]) async {
        print("üßπ Limpando cria√ß√£o parcial de exerc√≠cios...")
        
        for planExercise in planExercises {
            do {
                try await workoutDataService.removePlanExercise(planExercise, from: planExercise.plan!)
            } catch {
                print("‚ö†Ô∏è Erro na limpeza do exerc√≠cio: \(error)")
            }
        }
    }
}

// MARK: - Extension for Convenience

extension CreateWorkoutUseCase {
    
    /// M√©todo de conveni√™ncia para cria√ß√£o r√°pida de treino
    /// - Parameter title: T√≠tulo do treino (opcional - se nil, gera automaticamente)
    func createQuickWorkout(
        title: String? = nil,
        exercises: [CDExerciseTemplate],
        user: CDAppUser // ‚úÖ LOGIN OBRIGAT√ìRIO - BaseViewModel.currentUser nunca nil
    ) async throws -> CreateWorkoutOutput {
        let input = CreateWorkoutInput(
            title: title,
            muscleGroups: generateMuscleGroups(from: exercises),
            user: user,
            exerciseTemplates: exercises
        )
        
        return try await execute(input)
    }
    
    /// M√©todo de conveni√™ncia para cria√ß√£o autom√°tica de treino (t√≠tulo gerado automaticamente)
    func createAutoWorkout(
        exercises: [CDExerciseTemplate],
        user: CDAppUser // ‚úÖ LOGIN OBRIGAT√ìRIO - BaseViewModel.currentUser nunca nil
    ) async throws -> CreateWorkoutOutput {
        return try await createQuickWorkout(
            title: nil, // For√ßa gera√ß√£o autom√°tica
            exercises: exercises,
            user: user
        )
    }
    
    private func generateMuscleGroups(from exercises: [CDExerciseTemplate]) -> String {
        let muscleGroups = Set(exercises.compactMap { $0.muscleGroup })
        return muscleGroups.sorted().joined(separator: ", ")
    }
}

// MARK: - Exemplos de Uso

/*
 EXEMPLOS PR√ÅTICOS DE USO:

 // 1. Treino autom√°tico (sem personaliza√ß√£o)
 let auto = try await createWorkoutUseCase.execute(CreateWorkoutInput(
     title: nil,  // ‚Üê Sem customiza√ß√£o
     muscleGroups: nil,
     user: currentUser,  // ‚Üê LOGIN OBRIGAT√ìRIO: BaseViewModel.currentUser nunca nil
     exerciseTemplates: chestExercises
 ))
 // Resultado: autoTitle = "Treino A", displayTitle = "Treino A"

 // 2. Treino personalizado  
 let custom = try await createWorkoutUseCase.execute(CreateWorkoutInput(
     title: "Peitoral Heavy",  // ‚Üê T√≠tulo livre, sem "Treino"
     muscleGroups: nil,
     user: currentUser,  // ‚Üê LOGIN OBRIGAT√ìRIO: BaseViewModel.currentUser nunca nil
     exerciseTemplates: chestExercises
 ))
 // Resultado: autoTitle = "Treino B", customTitle = "Peitoral Heavy", displayTitle = "Peitoral Heavy (Treino B)"

 // 3. M√©todo de conveni√™ncia
 let quick = try await createWorkoutUseCase.createQuickWorkout(
     title: "Leg Killer",
     exercises: legExercises,
     user: currentUser  // ‚Üê LOGIN OBRIGAT√ìRIO: BaseViewModel.currentUser nunca nil
 )
 // Resultado: autoTitle = "Treino C", customTitle = "Leg Killer", displayTitle = "Leg Killer (Treino C)"

 // 4. Exibi√ß√£o nas Views
 Text(workoutPlan.displayTitle)    // "Peitoral Heavy (Treino B)" ou "Treino A"
 Text(workoutPlan.compactTitle)    // "Peitoral Heavy" ou "Treino A"
 Text(workoutPlan.safeAutoTitle)   // Sempre "Treino X" (para organiza√ß√£o)
 
 if workoutPlan.hasCustomTitle {
     // Mostrar √≠cone de personaliza√ß√£o
 }
 */ 