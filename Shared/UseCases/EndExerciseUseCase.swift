//
//  EndExerciseUseCase.swift
//  Fitter V2
//
//  üìã RESPONSABILIDADE: Finalizar exerc√≠cio individual e decidir pr√≥ximo passo
//  
//  üéØ OPERA√á√ïES PRINCIPAIS:
//  ‚Ä¢ Finalizar CDCurrentExercise ativo com endTime
//  ‚Ä¢ Calcular estat√≠sticas do exerc√≠cio (volume, tempo, s√©ries)
//  ‚Ä¢ Decidir pr√≥ximo passo: pr√≥ximo exerc√≠cio OU finalizar treino
//  ‚Ä¢ Atualizar √≠ndices de navega√ß√£o na sess√£o
//  ‚Ä¢ Sincronizar dados via SyncWorkoutUseCase (opcional)
//  ‚Ä¢ Preparar integra√ß√£o com HealthKit (item 54)
//  ‚Ä¢ Notificar Apple Watch sobre status
//  
//  üèóÔ∏è ARQUITETURA:
//  ‚Ä¢ Protocol + Implementation para testabilidade
//  ‚Ä¢ Dependency Injection: WorkoutDataService + SyncWorkoutUseCase
//  ‚Ä¢ Error handling espec√≠fico com EndExerciseError enum
//  ‚Ä¢ Input validation com EndExerciseInput struct
//  ‚Ä¢ Async/await nativo para performance
//  
//  ‚ö° INTEGRA√á√ÉO:
//  ‚Ä¢ WorkoutDataService: Opera√ß√µes CRUD de exerc√≠cios
//  ‚Ä¢ SyncWorkoutUseCase: Sincroniza√ß√£o autom√°tica (opcional)
//  ‚Ä¢ ConnectivityManager: Notifica√ß√£o Apple Watch
//  ‚Ä¢ HealthKitManager: Sess√£o HealthKit √© iniciada/finalizada apenas em Start/EndWorkoutUseCase.
// Aqui, apenas leitura de dados em tempo real se necess√°rio (ex: feedback, an√°lise).
//  
//  üîÑ LIFECYCLE:
//  1. Valida√ß√£o de entrada (exerc√≠cio ativo, sess√£o v√°lida)
//  2. Finaliza√ß√£o do CDCurrentExercise com endTime
//  3. C√°lculo de estat√≠sticas do exerc√≠cio
//  4. Decis√£o de navega√ß√£o (pr√≥ximo exerc√≠cio vs fim de treino)
//  5. Atualiza√ß√£o de √≠ndices na sess√£o
//  6. Sincroniza√ß√£o autom√°tica (opcional)
//  7. Notifica√ß√£o para Apple Watch
//  8. Finaliza√ß√£o de workout segment HealthKit (futuro)
//
//  Created by Daniel Lobo on 13/05/25.
//

import Foundation
import CoreData

// MARK: - EndExerciseInput

/// Input para finalizar um exerc√≠cio individual
/// Consolida todos os par√¢metros necess√°rios com valida√ß√µes
struct EndExerciseInput {
    let exercise: CDCurrentExercise
    let session: CDCurrentSession
    let user: CDAppUser  // ‚úÖ LOGIN OBRIGAT√ìRIO - BaseViewModel.currentUser nunca nil
    let endTime: Date
    let shouldCalculateStats: Bool
    let shouldSync: Bool
    let enableHealthKit: Bool
    let autoAdvanceToNext: Bool
    
    /// Inicializador com valores padr√£o otimizados
    init(
        exercise: CDCurrentExercise,
        session: CDCurrentSession,
        user: CDAppUser,
        endTime: Date = Date(),
        shouldCalculateStats: Bool = true,
        shouldSync: Bool = true,
        enableHealthKit: Bool = true,
        autoAdvanceToNext: Bool = true
    ) {
        self.exercise = exercise
        self.session = session
        self.user = user
        self.endTime = endTime
        self.shouldCalculateStats = shouldCalculateStats
        self.shouldSync = shouldSync
        self.enableHealthKit = enableHealthKit
        self.autoAdvanceToNext = autoAdvanceToNext
    }
    
    /// Valida√ß√£o b√°sica de entrada
    var isValid: Bool {
        return exercise.isActive && 
               session.isActive &&
               !exercise.safeId.uuidString.isEmpty &&
               endTime >= exercise.safeStartTime &&
               exercise.session == session &&
               session.user == user
    }
}

// MARK: - EndExerciseError

/// Erros espec√≠ficos para finaliza√ß√£o de exerc√≠cio
enum EndExerciseError: LocalizedError {
    case exerciseNotActive
    case sessionNotActive
    case exerciseNotFound
    case sessionMismatch
    case workoutDataServiceError(Error)
    case syncError(Error)
    case healthKitError(Error)
    case watchConnectivityError
    case invalidInput
    case statisticsCalculationFailed(Error)
    case navigationError(Error)
    case unknownError(Error)
    
    var errorDescription: String? {
        switch self {
        case .exerciseNotActive:
            return "Exerc√≠cio n√£o est√° ativo para finaliza√ß√£o."
        case .sessionNotActive:
            return "Sess√£o de treino n√£o est√° ativa."
        case .exerciseNotFound:
            return "Exerc√≠cio n√£o encontrado."
        case .sessionMismatch:
            return "Exerc√≠cio n√£o pertence √† sess√£o informada."
        case .workoutDataServiceError(let error):
            return "Erro ao salvar dados do exerc√≠cio: \(error.localizedDescription)"
        case .syncError(let error):
            return "Erro na sincroniza√ß√£o: \(error.localizedDescription)"
        case .healthKitError(let error):
            return "Erro no HealthKit: \(error.localizedDescription)"
        case .watchConnectivityError:
            return "Erro na comunica√ß√£o com Apple Watch."
        case .invalidInput:
            return "Dados de entrada inv√°lidos para finalizar exerc√≠cio."
        case .statisticsCalculationFailed(let error):
            return "Falha no c√°lculo de estat√≠sticas: \(error.localizedDescription)"
        case .navigationError(let error):
            return "Erro na navega√ß√£o: \(error.localizedDescription)"
        case .unknownError(let error):
            return "Erro inesperado: \(error.localizedDescription)"
        }
    }
}

// MARK: - EndExerciseStatistics

/// Estat√≠sticas calculadas do exerc√≠cio finalizado
struct EndExerciseStatistics {
    let exerciseName: String
    let duration: TimeInterval
    let totalSets: Int
    let completedSets: Int
    let totalVolume: Double // peso √ó reps total
    let averageWeight: Double
    let averageReps: Double
    let averageRestTime: TimeInterval?
    let totalRestTime: TimeInterval
    let caloriesBurned: Double?
    let averageHeartRate: Int?
    let peakHeartRate: Int?
    let isPersonalRecord: Bool
    
    /// Resumo textual das estat√≠sticas
    var summary: String {
        let durationMinutes = Int(duration / 60)
        let durationSeconds = Int(duration.truncatingRemainder(dividingBy: 60))
        
        var summary = "\(exerciseName): \(durationMinutes)m \(durationSeconds)s"
        summary += ", S√©ries: \(completedSets)/\(totalSets)"
        summary += ", Volume: \(String(format: "%.1f", totalVolume))kg"
        summary += ", Peso m√©dio: \(String(format: "%.1f", averageWeight))kg"
        summary += ", Reps m√©dias: \(String(format: "%.1f", averageReps))"
        
        if let calories = caloriesBurned {
            summary += ", Calorias: \(Int(calories))"
        }
        
        if isPersonalRecord {
            summary += " üèÜ PR!"
        }
        
        return summary
    }
}

// MARK: - EndExerciseResult

/// Resultado da finaliza√ß√£o do exerc√≠cio
struct EndExerciseResult {
    let finalizedExercise: CDCurrentExercise
    let statistics: EndExerciseStatistics
    let nextStep: NextStep
    let syncStatus: SyncStatus
    let healthKitStatus: HealthKitStatus
    let watchNotified: Bool
    
    /// Pr√≥ximo passo na navega√ß√£o
    enum NextStep {
        case nextExercise(CDExerciseTemplate, index: Int32)
        case workoutComplete
        case waitingForUserDecision
        
        var hasNextExercise: Bool {
            if case .nextExercise = self { return true }
            return false
        }
        
        var isWorkoutComplete: Bool {
            if case .workoutComplete = self { return true }
            return false
        }
    }
    
    /// Status de sincroniza√ß√£o
    enum SyncStatus {
        case synced
        case pending
        case failed(Error)
        case skipped
        case disabled
        
        var isSuccessful: Bool {
            if case .failed = self { return false }
            return true
        }
    }
    
    /// Status do HealthKit
    enum HealthKitStatus {
        case segmentEnded
        case failed(Error)
        case skipped
        case disabled
        
        var isSuccessful: Bool {
            if case .failed = self { return false }
            return true
        }
    }
}

// MARK: - EndExerciseUseCaseProtocol

/// Protocolo para finaliza√ß√£o de exerc√≠cio (testabilidade)
protocol EndExerciseUseCaseProtocol {
    func execute(_ input: EndExerciseInput) async throws -> EndExerciseResult
    func executeQuickEnd(exercise: CDCurrentExercise, session: CDCurrentSession, user: CDAppUser) async throws -> EndExerciseResult
    func canEndExercise(_ exercise: CDCurrentExercise) -> Bool
    func calculateExerciseStatistics(_ exercise: CDCurrentExercise) async throws -> EndExerciseStatistics
    func determineNextStep(after exercise: CDCurrentExercise, in session: CDCurrentSession) async -> EndExerciseResult.NextStep
}

// MARK: - EndExerciseUseCase

/// Use Case para finalizar exerc√≠cio individual e decidir pr√≥ximo passo
/// Orquestra finaliza√ß√£o, estat√≠sticas e navega√ß√£o dentro do fluxo granular
final class EndExerciseUseCase: EndExerciseUseCaseProtocol {
    
    // MARK: - Dependencies
    
    private let workoutDataService: WorkoutDataServiceProtocol
    private let syncWorkoutUseCase: SyncWorkoutUseCaseProtocol?
    // TODO: Adicionar HealthKitManager quando item 65 for implementado (iOSApp.swift)
    // private let healthKitManager: HealthKitManagerProtocol
    
    // MARK: - Initialization
    
    init(
        workoutDataService: WorkoutDataServiceProtocol,
        syncWorkoutUseCase: SyncWorkoutUseCaseProtocol? = nil
    ) {
        self.workoutDataService = workoutDataService
        self.syncWorkoutUseCase = syncWorkoutUseCase
    }
    
    // MARK: - Public Methods
    
    /// Executa finaliza√ß√£o completa de exerc√≠cio com navega√ß√£o inteligente
    func execute(_ input: EndExerciseInput) async throws -> EndExerciseResult {
        print("üèÅ [END EXERCISE] Finalizando exerc√≠cio: \(input.exercise.template?.safeName ?? "Unknown")")
        
        // 1. Valida√ß√£o de entrada
        try await validateInput(input)
        
        // 2. Verificar se pode finalizar exerc√≠cio
        guard canEndExercise(input.exercise) else {
            throw EndExerciseError.exerciseNotActive
        }
        
        // 3. Finalizar exerc√≠cio
        try await finalizeExercise(input.exercise, endTime: input.endTime)
        
        // 4. Calcular estat√≠sticas
        let statistics = input.shouldCalculateStats ? 
            try await calculateDetailedStatistics(input.exercise) :
            try await calculateBasicStatistics(input.exercise)
        
        // 5. Determinar pr√≥ximo passo
        let nextStep = await determineNextStep(after: input.exercise, in: input.session)
        
        // 6. Atualizar navega√ß√£o da sess√£o
        try await updateSessionNavigation(input.session, nextStep: nextStep)
        
        // 7. Finalizar HealthKit segment
        let healthKitStatus = await finalizeHealthKitSegment(input)
        
        // 8. Sincroniza√ß√£o autom√°tica (opcional)
        let syncStatus = await performSync(exercise: input.exercise, shouldSync: input.shouldSync)
        
        // 9. Notificar Apple Watch
        let watchNotified = await notifyAppleWatch(exercise: input.exercise, nextStep: nextStep)
        
        let result = EndExerciseResult(
            finalizedExercise: input.exercise,
            statistics: statistics,
            nextStep: nextStep,
            syncStatus: syncStatus,
            healthKitStatus: healthKitStatus,
            watchNotified: watchNotified
        )
        
        print("‚úÖ [END EXERCISE] Exerc√≠cio finalizado com sucesso")
        print("üìä [END EXERCISE] Estat√≠sticas: \(statistics.summary)")
        print("üß≠ [END EXERCISE] Pr√≥ximo passo: \(nextStepDescription(nextStep))")
        
        return result
    }
    
    /// M√©todo de conveni√™ncia para finaliza√ß√£o r√°pida
    func executeQuickEnd(exercise: CDCurrentExercise, session: CDCurrentSession, user: CDAppUser) async throws -> EndExerciseResult {
        let input = EndExerciseInput(exercise: exercise, session: session, user: user)
        return try await execute(input)
    }
    
    /// Verifica se exerc√≠cio pode ser finalizado
    func canEndExercise(_ exercise: CDCurrentExercise) -> Bool {
        return exercise.isActive && 
               !exercise.safeId.uuidString.isEmpty &&
               exercise.endTime == nil &&
               exercise.safeStartTime.timeIntervalSinceNow < 0 // Iniciado no passado
    }
    
    /// Calcula estat√≠sticas do exerc√≠cio (sem finalizar)
    func calculateExerciseStatistics(_ exercise: CDCurrentExercise) async throws -> EndExerciseStatistics {
        return try await calculateBasicStatistics(exercise)
    }
    
    /// Determina pr√≥ximo passo na navega√ß√£o
    func determineNextStep(after exercise: CDCurrentExercise, in session: CDCurrentSession) async -> EndExerciseResult.NextStep {
        guard let plan = session.plan else {
            return .workoutComplete
        }
        
        let exercises = plan.exercisesArray
        let currentIndex = Int(session.currentExerciseIndex)
        let nextIndex = currentIndex + 1
        
        // Verificar se h√° pr√≥ximo exerc√≠cio
        if nextIndex < exercises.count,
           let nextTemplate = exercises[nextIndex].template {
            return .nextExercise(nextTemplate, index: Int32(nextIndex))
        }
        
        // √öltimo exerc√≠cio - treino completo
        return .workoutComplete
    }
    
    // MARK: - Private Methods
    
    /// Valida√ß√£o robusta de entrada
    private func validateInput(_ input: EndExerciseInput) async throws {
        guard input.isValid else {
            throw EndExerciseError.invalidInput
        }
        
        guard input.exercise.isActive else {
            throw EndExerciseError.exerciseNotActive
        }
        
        guard input.session.isActive else {
            throw EndExerciseError.sessionNotActive
        }
        
        guard input.exercise.session == input.session else {
            throw EndExerciseError.sessionMismatch
        }
    }
    
    /// Finaliza exerc√≠cio com endTime
    private func finalizeExercise(_ exercise: CDCurrentExercise, endTime: Date) async throws {
        do {
            try await workoutDataService.updateCurrentExercise(exercise, endTime: endTime)
            print("‚úÖ [END EXERCISE] Exerc√≠cio finalizado: \(exercise.template?.safeName ?? "Unknown")")
        } catch {
            throw EndExerciseError.workoutDataServiceError(error)
        }
    }
    
    /// Calcula estat√≠sticas b√°sicas do exerc√≠cio
    private func calculateBasicStatistics(_ exercise: CDCurrentExercise) async throws -> EndExerciseStatistics {
        do {
            let exerciseName = exercise.template?.safeName ?? "Exerc√≠cio Desconhecido"
            let duration = exercise.duration
            
            // Buscar current sets do exerc√≠cio
            let allCurrentSets = try await workoutDataService.fetchCurrentSets(for: exercise)
            let totalSets = allCurrentSets.count
            let completedSets = allCurrentSets.filter { $0.endTime != nil }.count
            
            // Calcular m√©tricas b√°sicas
            let totalVolume = allCurrentSets.reduce(0.0) { sum, set in
                let reps = Double(set.actualReps ?? set.targetReps)
                return sum + (set.weight * reps)
            }
            
            let weights = allCurrentSets.map { $0.weight }
            let averageWeight = weights.isEmpty ? 0.0 : weights.reduce(0, +) / Double(weights.count)
            
            let reps = allCurrentSets.map { Double($0.actualReps ?? $0.targetReps) }
            let averageReps = reps.isEmpty ? 0.0 : reps.reduce(0, +) / Double(reps.count)
            
            // Tempo de descanso
            let restTimes = allCurrentSets.compactMap { $0.restTime }
            let totalRestTime = restTimes.reduce(0, +)
            let averageRestTime = restTimes.isEmpty ? nil : totalRestTime / Double(restTimes.count)
            
            // M√©tricas de sa√∫de
            let calories = allCurrentSets.compactMap { $0.caloriesBurned }
            let totalCalories = calories.isEmpty ? nil : calories.reduce(0, +)
            
            let heartRates = allCurrentSets.compactMap { $0.heartRate }
            let averageHeartRate = heartRates.isEmpty ? nil : Int(Double(heartRates.reduce(0, +)) / Double(heartRates.count))
            let peakHeartRate = heartRates.isEmpty ? nil : heartRates.max()
            
            // TODO: Implementar detec√ß√£o de PR comparando com hist√≥rico
            let isPersonalRecord = false
            
            return EndExerciseStatistics(
                exerciseName: exerciseName,
                duration: duration,
                totalSets: totalSets,
                completedSets: completedSets,
                totalVolume: totalVolume,
                averageWeight: averageWeight,
                averageReps: averageReps,
                averageRestTime: averageRestTime,
                totalRestTime: totalRestTime,
                caloriesBurned: totalCalories,
                averageHeartRate: averageHeartRate,
                peakHeartRate: peakHeartRate,
                isPersonalRecord: isPersonalRecord
            )
            
        } catch {
            throw EndExerciseError.statisticsCalculationFailed(error)
        }
    }
    
    /// Calcula estat√≠sticas detalhadas com an√°lise de sensor data
    private func calculateDetailedStatistics(_ exercise: CDCurrentExercise) async throws -> EndExerciseStatistics {
        // Por agora, usar estat√≠sticas b√°sicas
        // TODO: Adicionar an√°lise avan√ßada de sensorData quando dispon√≠vel
        return try await calculateBasicStatistics(exercise)
    }
    
    /// Atualiza navega√ß√£o da sess√£o baseada no pr√≥ximo passo
    private func updateSessionNavigation(_ session: CDCurrentSession, nextStep: EndExerciseResult.NextStep) async throws {
        do {
            switch nextStep {
            case .nextExercise(_, let index):
                session.currentExerciseIndex = index
                print("üìç [END EXERCISE] √çndice atualizado para: \(index)")
                
            case .workoutComplete:
                // Manter √≠ndice atual - EndWorkoutUseCase decidir√° o que fazer
                print("üèÅ [END EXERCISE] Treino pronto para finaliza√ß√£o")
                
            case .waitingForUserDecision:
                // N√£o alterar √≠ndice - usu√°rio decidir√°
                print("‚è∏Ô∏è [END EXERCISE] Aguardando decis√£o do usu√°rio")
            }
            
            try await workoutDataService.coreDataService.save()
            
        } catch {
            throw EndExerciseError.navigationError(error)
        }
    }
    
    /// Finaliza segment HealthKit (prepara√ß√£o para item 54)
    private func finalizeHealthKitSegment(_ input: EndExerciseInput) async -> EndExerciseResult.HealthKitStatus {
        guard input.enableHealthKit else {
            print("‚ÑπÔ∏è [END EXERCISE] HealthKit desabilitado pelo usu√°rio")
            return .skipped
        }
        
        print("üè• [END EXERCISE] HealthKit ser√° integrado no item 65 (iOSApp.swift)")
        // TODO: Implementar quando HealthKitManager for injetado no item 65
        
        return .disabled // Tempor√°rio at√© item 65
    }
    
    /// Sincroniza√ß√£o com tratamento de erro
    private func performSync(exercise: CDCurrentExercise, shouldSync: Bool) async -> EndExerciseResult.SyncStatus {
        guard shouldSync, let syncUseCase = syncWorkoutUseCase else {
            print("‚è≠Ô∏è [END EXERCISE] Sincroniza√ß√£o desabilitada")
            return .disabled
        }
        
        do {
            try await syncUseCase.execute(exercise)
            print("‚òÅÔ∏è [END EXERCISE] Exerc√≠cio sincronizado")
            return .synced
        } catch {
            print("‚ö†Ô∏è [END EXERCISE] Falha na sincroniza√ß√£o: \(error)")
            return .failed(error)
        }
    }
    
    /// Notifica√ß√£o para Apple Watch
    private func notifyAppleWatch(exercise: CDCurrentExercise, nextStep: EndExerciseResult.NextStep) async -> Bool {
        #if os(iOS)
        do {
            let connectivityManager = ConnectivityManager.shared
            
            var exerciseContext: [String: Any] = [
                "type": "exerciseEnded",
                "exerciseId": exercise.safeId.uuidString,
                "exerciseName": exercise.template?.safeName ?? "",
                "endTime": exercise.endTime?.timeIntervalSince1970 ?? Date().timeIntervalSince1970,
                "duration": exercise.duration
            ]
            
            // Adicionar informa√ß√£o do pr√≥ximo passo
            switch nextStep {
            case .nextExercise(let template, let index):
                exerciseContext["hasNext"] = true
                exerciseContext["nextExerciseName"] = template.safeName
                exerciseContext["nextExerciseIndex"] = index
                
            case .workoutComplete:
                exerciseContext["hasNext"] = false
                exerciseContext["workoutComplete"] = true
                
            case .waitingForUserDecision:
                exerciseContext["hasNext"] = false
                exerciseContext["waitingDecision"] = true
            }
            
            await connectivityManager.sendMessage(exerciseContext, replyHandler: nil)
            print("üì±‚û°Ô∏è‚åö Finaliza√ß√£o de exerc√≠cio notificada ao Watch")
            return true
            
        } catch {
            print("‚ùå [END EXERCISE] Erro ao notificar Watch: \(error)")
            return false
        }
        #else
        print("‚ÑπÔ∏è [END EXERCISE] Notifica√ß√£o Watch apenas dispon√≠vel no iOS")
        return false
        #endif
    }
    
    /// Descri√ß√£o textual do pr√≥ximo passo
    private func nextStepDescription(_ nextStep: EndExerciseResult.NextStep) -> String {
        switch nextStep {
        case .nextExercise(let template, let index):
            return "Pr√≥ximo exerc√≠cio: \(template.safeName) (√≠ndice \(index))"
        case .workoutComplete:
            return "Treino completo - pronto para finaliza√ß√£o"
        case .waitingForUserDecision:
            return "Aguardando decis√£o do usu√°rio"
        }
    }
}

// MARK: - Convenience Extensions

extension EndExerciseUseCase {
    
    /// Finaliza exerc√≠cio com configura√ß√µes padr√£o
    func endDefaultExercise(exercise: CDCurrentExercise, session: CDCurrentSession, user: CDAppUser) async throws -> EndExerciseResult {
        return try await executeQuickEnd(exercise: exercise, session: session, user: user)
    }
    
    /// Finaliza exerc√≠cio sem sincroniza√ß√£o
    func endExerciseOffline(exercise: CDCurrentExercise, session: CDCurrentSession, user: CDAppUser) async throws -> EndExerciseResult {
        let input = EndExerciseInput(
            exercise: exercise,
            session: session,
            user: user,
            shouldSync: false
        )
        return try await execute(input)
    }
    
    /// Finaliza exerc√≠cio sem HealthKit
    func endExerciseWithoutHealthKit(exercise: CDCurrentExercise, session: CDCurrentSession, user: CDAppUser) async throws -> EndExerciseResult {
        let input = EndExerciseInput(
            exercise: exercise,
            session: session,
            user: user,
            enableHealthKit: false
        )
        return try await execute(input)
    }
    
    /// Finaliza exerc√≠cio sem avan√ßar automaticamente
    func endExerciseManual(exercise: CDCurrentExercise, session: CDCurrentSession, user: CDAppUser) async throws -> EndExerciseResult {
        let input = EndExerciseInput(
            exercise: exercise,
            session: session,
            user: user,
            autoAdvanceToNext: false
        )
        return try await execute(input)
    }
}

// MARK: - Navigation Helpers

extension EndExerciseUseCase {
    
    /// Verifica se h√° pr√≥ximo exerc√≠cio ap√≥s o atual
    func hasNextExercise(after exercise: CDCurrentExercise, in session: CDCurrentSession) async -> Bool {
        let nextStep = await determineNextStep(after: exercise, in: session)
        return nextStep.hasNextExercise
    }
    
    /// Conta exerc√≠cios restantes ap√≥s o atual
    func remainingExercisesCount(after exercise: CDCurrentExercise, in session: CDCurrentSession) -> Int {
        guard let plan = session.plan else { return 0 }
        
        let totalExercises = plan.exercisesArray.count
        let currentIndex = Int(session.currentExerciseIndex)
        
        return max(0, totalExercises - currentIndex - 1)
    }
    
    /// Obt√©m lista de exerc√≠cios restantes ap√≥s o atual
    func getRemainingExercises(after exercise: CDCurrentExercise, in session: CDCurrentSession) -> [CDExerciseTemplate] {
        guard let plan = session.plan else { return [] }
        
        let exercises = plan.exercisesArray
        let currentIndex = Int(session.currentExerciseIndex + 1)
        
        guard currentIndex < exercises.count else { return [] }
        
        return Array(exercises[currentIndex...]).compactMap { $0.template }
    }
} 