/*
 * SyncWorkoutUseCase.swift
 * Fitter V2
 *
 * RESPONSABILIDADE: Use Case central de sincroniza√ß√£o para entidades Syncable.
 *                   Motor puro de sincroniza√ß√£o chamado pelos outros Use Cases de CRUD.
 *
 * ARQUITETURA:
 * - Orquestra CloudSyncManager (sincroniza√ß√£o com Firestore)
 * - N√ÉO acessa Core Data diretamente
 * - N√ÉO cont√©m l√≥gica de UI ou persist√™ncia
 * - N√ÉO modifica entidades - apenas agenda sincroniza√ß√£o
 *
 * DEPEND√äNCIAS:
 * - CloudSyncManager: Sincroniza√ß√£o autom√°tica com Firestore
 * - Protocolo Syncable: Interface comum para todas as entidades sincroniz√°veis
 *
 * FLUXO DE EXECU√á√ÉO:
 * 1. Recebe entidade Syncable para sincronizar
 * 2. Agenda sincroniza√ß√£o via CloudSyncManager
 * 3. Monitora resultado da sincroniza√ß√£o
 * 4. Retorna status de sucesso/falha
 *
 * CASOS DE USO:
 * - Sincroniza√ß√£o ap√≥s cria√ß√£o de treino (CreateWorkoutUseCase)
 * - Sincroniza√ß√£o ap√≥s edi√ß√£o de treino (UpdateWorkoutUseCase)
 * - Sincroniza√ß√£o ap√≥s dele√ß√£o de treino (DeleteWorkoutUseCase)
 * - Sincroniza√ß√£o ap√≥s reordena√ß√£o (ReorderWorkoutUseCase/ReorderExerciseUseCase)
 * - Sincroniza√ß√£o manual de entidades pendentes
 * - Sincroniza√ß√£o em lote de m√∫ltiplas entidades
 *
 * ENTIDADES SUPORTADAS:
 * - CDWorkoutPlan (planos de treino)
 * - CDAppUser (usu√°rios da aplica√ß√£o)
 * - CDExerciseTemplate (templates de exerc√≠cios - futuro)
 * - CDWorkoutHistory (hist√≥rico de treinos - futuro)
 * - Qualquer entidade que implemente protocolo Syncable
 *
 * ESTRAT√âGIAS DE SINCRONIZA√á√ÉO:
 * - Upload: Agenda entidade para envio ao Firestore
 * - Download: For√ßa download de mudan√ßas remotas
 * - Delete: Agenda dele√ß√£o remota da entidade
 * - Full Sync: Sincroniza√ß√£o completa de todas as entidades pendentes
 *
 * PADR√ïES:
 * - Protocol + Implementation para testabilidade
 * - Dependency Injection via inicializador
 * - Error handling espec√≠fico do dom√≠nio
 * - Async/await para opera√ß√µes ass√≠ncronas
 * - Actor isolation para thread safety (CloudSyncManager)
 *
 * REFATORA√á√ÉO ITEM 23/61:
 * ‚úÖ Motor puro de sincroniza√ß√£o centralizado
 * ‚úÖ Integra√ß√£o com CloudSyncManager existente
 * ‚úÖ Interface compat√≠vel com todos os Use Cases CRUD
 * ‚úÖ Clean Architecture - separa√ß√£o clara de responsabilidades
 * ‚úÖ Preparado para m√∫ltiplos tipos de entidades
 */

import Foundation
import CoreData

// MARK: - SyncWorkoutError

enum SyncWorkoutError: Error, LocalizedError {
    case invalidEntity(String)
    case entityNotFound
    case syncSchedulingFailed(Error)
    case syncExecutionFailed(Error)
    case cloudSyncManagerUnavailable
    case unsupportedEntityType(String)
    case networkUnavailable
    case authenticationRequired
    case quotaExceeded
    
    var errorDescription: String? {
        switch self {
        case .invalidEntity(let message):
            return "Entidade inv√°lida para sincroniza√ß√£o: \(message)"
        case .entityNotFound:
            return "Entidade n√£o encontrada para sincroniza√ß√£o"
        case .syncSchedulingFailed(let error):
            return "Falha ao agendar sincroniza√ß√£o: \(error.localizedDescription)"
        case .syncExecutionFailed(let error):
            return "Falha na execu√ß√£o da sincroniza√ß√£o: \(error.localizedDescription)"
        case .cloudSyncManagerUnavailable:
            return "CloudSyncManager n√£o est√° dispon√≠vel"
        case .unsupportedEntityType(let type):
            return "Tipo de entidade n√£o suportado para sincroniza√ß√£o: \(type)"
        case .networkUnavailable:
            return "Rede n√£o dispon√≠vel para sincroniza√ß√£o"
        case .authenticationRequired:
            return "Autentica√ß√£o necess√°ria para sincroniza√ß√£o"
        case .quotaExceeded:
            return "Cota de sincroniza√ß√£o excedida"
        }
    }
}

// MARK: - SyncWorkoutStrategy

enum SyncWorkoutStrategy {
    case upload        /// Agenda entidade para upload ao Firestore
    case download      /// For√ßa download de mudan√ßas remotas
    case delete        /// Agenda dele√ß√£o remota da entidade
    case fullSync      /// Sincroniza√ß√£o completa de todas as entidades pendentes
    case auto          /// Estrat√©gia autom√°tica baseada no status da entidade
    
    var description: String {
        switch self {
        case .upload: return "Upload"
        case .download: return "Download"
        case .delete: return "Delete"
        case .fullSync: return "Sincroniza√ß√£o Completa"
        case .auto: return "Autom√°tico"
        }
    }
}

// MARK: - SyncWorkoutResult

struct SyncWorkoutResult {
    let entityId: UUID?
    let entityType: String
    let strategy: SyncWorkoutStrategy
    let success: Bool
    let error: Error?
    let timestamp: Date
    
    init(
        entityId: UUID?,
        entityType: String,
        strategy: SyncWorkoutStrategy,
        success: Bool,
        error: Error? = nil
    ) {
        self.entityId = entityId
        self.entityType = entityType
        self.strategy = strategy
        self.success = success
        self.error = error
        self.timestamp = Date()
    }
}

// MARK: - SyncWorkoutUseCaseProtocol

protocol SyncWorkoutUseCaseProtocol {
    /// Sincroniza uma entidade espec√≠fica
    func execute(_ entity: any Syncable) async throws
    
    /// Sincroniza uma entidade com estrat√©gia espec√≠fica
    func execute(_ entity: any Syncable, strategy: SyncWorkoutStrategy) async throws -> SyncWorkoutResult
    
    /// Sincroniza m√∫ltiplas entidades em lote
    func executeBatch(_ entities: [any Syncable]) async throws -> [SyncWorkoutResult]
    
    /// For√ßa sincroniza√ß√£o completa de todas as entidades pendentes
    func syncAllPendingEntities() async throws
    
    /// Agenda dele√ß√£o remota de uma entidade por ID
    func scheduleRemoteDeletion(entityId: UUID) async throws
}

// MARK: - SyncWorkoutUseCase

final class SyncWorkoutUseCase: SyncWorkoutUseCaseProtocol {
    
    // MARK: - Properties
    
    private let cloudSyncManager: CloudSyncManager
    
    // MARK: - Initialization
    
    init(cloudSyncManager: CloudSyncManager = CloudSyncManager.shared) {
        self.cloudSyncManager = cloudSyncManager
        print("üîÑ SyncWorkoutUseCase inicializado")
    }
    
    // MARK: - Public Methods
    
    /// Sincroniza uma entidade usando estrat√©gia autom√°tica
    func execute(_ entity: any Syncable) async throws {
        let entityType = String(describing: type(of: entity))
        print("üîÑ Sincronizando \(entityType)")
        
        guard let entityId = entity.id else {
            throw SyncWorkoutError.invalidEntity("Entidade n√£o possui ID v√°lido")
        }
        
        do {
            if entity.needsSync {
                await cloudSyncManager.scheduleUpload(entityId: entityId)
                print("‚úÖ Sincroniza√ß√£o agendada para \(entityType)")
            } else {
                print("‚ÑπÔ∏è Entidade \(entityType) j√° sincronizada")
            }
        } catch {
            print("‚ùå Falha na sincroniza√ß√£o de \(entityType): \(error)")
            throw SyncWorkoutError.syncExecutionFailed(error)
        }
    }
    
    /// Sincroniza uma entidade com estrat√©gia espec√≠fica
    func execute(_ entity: any Syncable, strategy: SyncWorkoutStrategy) async throws -> SyncWorkoutResult {
        let entityType = String(describing: type(of: entity))
        print("üîÑ Iniciando sincroniza√ß√£o \(strategy.description) para \(entityType)")
        
        do {
            // 1. Validar entidade
            try validateEntity(entity)
            
            // 2. Executar estrat√©gia de sincroniza√ß√£o
            switch strategy {
            case .upload:
                try await executeUpload(entity)
            case .download:
                try await executeDownload()
            case .delete:
                try await executeDelete(entity)
            case .fullSync:
                try await executeFullSync()
            case .auto:
                try await executeAuto(entity)
            }
            
            let result = SyncWorkoutResult(
                entityId: entity.id,
                entityType: entityType,
                strategy: strategy,
                success: true
            )
            
            print("‚úÖ Sincroniza√ß√£o \(strategy.description) conclu√≠da para \(entityType)")
            return result
            
        } catch {
            print("‚ùå Falha na sincroniza√ß√£o \(strategy.description) para \(entityType): \(error)")
            
            let result = SyncWorkoutResult(
                entityId: entity.id,
                entityType: entityType,
                strategy: strategy,
                success: false,
                error: error
            )
            
            throw SyncWorkoutError.syncExecutionFailed(error)
        }
    }
    
    /// Sincroniza m√∫ltiplas entidades em lote
    func executeBatch(_ entities: [any Syncable]) async throws -> [SyncWorkoutResult] {
        print("üîÑ Iniciando sincroniza√ß√£o em lote de \(entities.count) entidades")
        
        var results: [SyncWorkoutResult] = []
        
        for entity in entities {
            do {
                let result = try await execute(entity, strategy: .auto)
                results.append(result)
            } catch {
                let entityType = String(describing: type(of: entity))
                let failedResult = SyncWorkoutResult(
                    entityId: entity.id,
                    entityType: entityType,
                    strategy: .auto,
                    success: false,
                    error: error
                )
                results.append(failedResult)
                print("‚ùå Falha na sincroniza√ß√£o da entidade \(entityType): \(error)")
            }
        }
        
        let successCount = results.filter { $0.success }.count
        print("üìä Sincroniza√ß√£o em lote conclu√≠da: \(successCount)/\(entities.count) sucessos")
        
        return results
    }
    
    /// For√ßa sincroniza√ß√£o completa de todas as entidades pendentes
    func syncAllPendingEntities() async throws {
        print("üîÑ Iniciando sincroniza√ß√£o completa de todas as entidades pendentes")
        
        do {
            await cloudSyncManager.syncPendingChanges()
            print("‚úÖ Sincroniza√ß√£o completa conclu√≠da")
        } catch {
            print("‚ùå Falha na sincroniza√ß√£o completa: \(error)")
            throw SyncWorkoutError.syncExecutionFailed(error)
        }
    }
    
    /// Agenda dele√ß√£o remota de uma entidade por ID
    func scheduleRemoteDeletion(entityId: UUID) async throws {
        print("üóëÔ∏è Agendando dele√ß√£o remota da entidade: \(entityId)")
        
        do {
            await cloudSyncManager.scheduleDeletion(entityId: entityId)
            print("‚úÖ Dele√ß√£o remota agendada: \(entityId)")
        } catch {
            print("‚ùå Falha ao agendar dele√ß√£o remota: \(error)")
            throw SyncWorkoutError.syncSchedulingFailed(error)
        }
    }
    
    // MARK: - Private Methods
    
    private func validateEntity(_ entity: any Syncable) throws {
        // Validar que a entidade tem ID
        guard entity.id != nil else {
            throw SyncWorkoutError.invalidEntity("Entidade n√£o possui ID v√°lido")
        }
        
        // Validar tipo de entidade suportado
        let entityType = String(describing: type(of: entity))
        let supportedTypes = ["CDWorkoutPlan", "CDAppUser", "CDExerciseTemplate", "CDWorkoutHistory"]
        
        let isSupported = supportedTypes.contains { supportedType in
            entityType.contains(supportedType)
        }
        
        guard isSupported else {
            throw SyncWorkoutError.unsupportedEntityType(entityType)
        }
    }
    
    private func executeUpload(_ entity: any Syncable) async throws {
        guard let entityId = entity.id else {
            throw SyncWorkoutError.invalidEntity("Entidade n√£o possui ID para upload")
        }
        
        await cloudSyncManager.scheduleUpload(entityId: entityId)
    }
    
    private func executeDownload() async throws {
        await cloudSyncManager.syncPendingChanges()
    }
    
    private func executeDelete(_ entity: any Syncable) async throws {
        guard let entityId = entity.id else {
            throw SyncWorkoutError.invalidEntity("Entidade n√£o possui ID para dele√ß√£o")
        }
        
        await cloudSyncManager.scheduleDeletion(entityId: entityId)
    }
    
    private func executeFullSync() async throws {
        await cloudSyncManager.syncPendingChanges()
    }
    
    private func executeAuto(_ entity: any Syncable) async throws {
        if entity.needsSync {
            try await executeUpload(entity)
        }
        // Se j√° sincronizado, n√£o faz nada
    }
}

// MARK: - Convenience Extensions

extension SyncWorkoutUseCase {
    
    /// M√©todo de conveni√™ncia para sincronizar um plano de treino
    func syncWorkoutPlan(_ plan: CDWorkoutPlan) async throws {
        try await execute(plan)
    }
    
    /// M√©todo de conveni√™ncia para sincronizar um usu√°rio
    func syncUser(_ user: CDAppUser) async throws {
        try await execute(user)
    }
    
    /// M√©todo de conveni√™ncia para agendar upload de uma entidade
    func scheduleUpload(_ entity: any Syncable) async throws {
        _ = try await execute(entity, strategy: .upload)
    }
    
    /// M√©todo de conveni√™ncia para for√ßa download de mudan√ßas remotas
    func forceDownload() async throws {
        // Cria uma entidade dummy para usar a estrat√©gia de download
        let dummyPlan = CDWorkoutPlan()
        dummyPlan.id = UUID()
        _ = try await execute(dummyPlan, strategy: .download)
    }
} 