/*
 * ReorderExerciseUseCase.swift
 * Fitter V2
 *
 * RESPONSABILIDADE: Use Case para reordena√ß√£o de exerc√≠cios dentro de um plano de treino.
 *                   Implementa Clean Architecture com orquestra√ß√£o de opera√ß√µes de persist√™ncia e sincroniza√ß√£o.
 *
 * ARQUITETURA:
 * - Orquestra WorkoutDataService (persist√™ncia local)
 * - Orquestra SyncWorkoutUseCase (sincroniza√ß√£o remota - quando dispon√≠vel)
 * - N√ÉO acessa Core Data diretamente
 * - N√ÉO cont√©m l√≥gica de UI
 *
 * DEPEND√äNCIAS:
 * - WorkoutDataServiceProtocol: CRUD e reordena√ß√£o de exerc√≠cios em planos
 * - SyncWorkoutUseCaseProtocol: Sincroniza√ß√£o remota (item 23 - opcional)
 *
 * FLUXO DE EXECU√á√ÉO:
 * 1. Valida√ß√£o de entrada (exerc√≠cios v√°lidos, mesmo plano)
 * 2. Reordena√ß√£o via WorkoutDataService (atualiza campo 'order' de CDPlanExercise)
 * 3. Sincroniza√ß√£o do plano via SyncWorkoutUseCase (quando dispon√≠vel)
 * 4. Retorno do resultado com status de sincroniza√ß√£o
 *
 * L√ìGICA DE REORDENA√á√ÉO:
 * - Recebe array de CDPlanExercise na nova ordem desejada
 * - Atualiza campo 'order' de cada exerc√≠cio (0, 1, 2...)
 * - Marca cloudSyncStatus como 'pending' para sincroniza√ß√£o
 * - Marca o plano pai tamb√©m como 'pending'
 *
 * CASOS DE USO:
 * - Drag & drop de exerc√≠cios dentro de um plano
 * - Reorganiza√ß√£o manual por prefer√™ncia do usu√°rio
 * - Ordena√ß√£o autom√°tica por grupos musculares, equipamento, etc.
 *
 * VALIDA√á√ïES ESPEC√çFICAS:
 * - Todos os exerc√≠cios devem pertencer ao mesmo plano
 * - Exerc√≠cios devem ter templates v√°lidos
 * - Plano pai deve estar dispon√≠vel
 *
 * PADR√ïES:
 * - Protocol + Implementation para testabilidade
 * - Dependency Injection via inicializador
 * - Error handling espec√≠fico do dom√≠nio
 * - Async/await para opera√ß√µes ass√≠ncronas
 *
 * REFATORA√á√ÉO ITEM 22/61:
 * ‚úÖ Use Case de reordena√ß√£o de exerc√≠cios com orquestra√ß√£o
 * ‚úÖ Inje√ß√£o de WorkoutDataService
 * ‚úÖ Preparado para SyncWorkoutUseCase (item 23)
 * ‚úÖ Clean Architecture - sem acesso direto ao Core Data
 * ‚úÖ Tratamento de erros espec√≠ficos do dom√≠nio
 */

import Foundation

// MARK: - ReorderExerciseError

enum ReorderExerciseError: Error, LocalizedError {
    case invalidInput(String)
    case emptyList
    case duplicateExercises
    case planMismatch
    case planNotFound
    case templateMissing
    case reorderFailed(Error)
    case syncFailed(Error)
    
    var errorDescription: String? {
        switch self {
        case .invalidInput(let message):
            return "Dados inv√°lidos para reordena√ß√£o de exerc√≠cios: \(message)"
        case .emptyList:
            return "Lista de exerc√≠cios n√£o pode estar vazia"
        case .duplicateExercises:
            return "Lista cont√©m exerc√≠cios duplicados"
        case .planMismatch:
            return "Todos os exerc√≠cios devem pertencer ao mesmo plano"
        case .planNotFound:
            return "Plano de treino n√£o encontrado para os exerc√≠cios"
        case .templateMissing:
            return "Um ou mais exerc√≠cios n√£o t√™m template v√°lido"
        case .reorderFailed(let error):
            return "Falha na reordena√ß√£o dos exerc√≠cios: \(error.localizedDescription)"
        case .syncFailed(let error):
            return "Falha na sincroniza√ß√£o da reordena√ß√£o: \(error.localizedDescription)"
        }
    }
}

// MARK: - ReorderExerciseInput

struct ReorderExerciseInput {
    let planExercises: [CDPlanExercise]
    let workoutPlan: CDWorkoutPlan? // Para valida√ß√£o adicional
    
    /// Valida√ß√£o dos dados de entrada
    func validate() throws {
        // Validar lista n√£o vazia
        guard !planExercises.isEmpty else {
            throw ReorderExerciseError.emptyList
        }
        
        // Validar que n√£o h√° duplicatas (baseado no ID)
        let uniqueIds = Set(planExercises.map { $0.safeId })
        guard uniqueIds.count == planExercises.count else {
            throw ReorderExerciseError.duplicateExercises
        }
        
        // Validar que todos os exerc√≠cios pertencem ao mesmo plano
        let plans = Set(planExercises.compactMap { $0.plan })
        guard plans.count <= 1 else {
            throw ReorderExerciseError.planMismatch
        }
        
        // Validar que existe um plano
        guard let commonPlan = plans.first else {
            throw ReorderExerciseError.planNotFound
        }
        
        // Se workoutPlan foi fornecido, validar que √© o mesmo
        if let providedPlan = workoutPlan {
            guard commonPlan == providedPlan else {
                throw ReorderExerciseError.planMismatch
            }
        }
        
        // Validar que todos os exerc√≠cios t√™m templates v√°lidos
        let exercisesWithoutTemplate = planExercises.filter { $0.template == nil }
        guard exercisesWithoutTemplate.isEmpty else {
            throw ReorderExerciseError.templateMissing
        }
        
        // Validar que todos os exerc√≠cios t√™m IDs v√°lidos
        let invalidExercises = planExercises.filter { exercise in
            exercise.safeId.uuidString.isEmpty
        }
        guard invalidExercises.isEmpty else {
            throw ReorderExerciseError.invalidInput("Alguns exerc√≠cios t√™m IDs inv√°lidos")
        }
    }
}

// MARK: - ReorderExerciseOutput

struct ReorderExerciseOutput {
    let reorderedExercises: [CDPlanExercise]
    let workoutPlan: CDWorkoutPlan
    let affectedCount: Int
    let syncStatus: ReorderExerciseSyncStatus
    let orderChanges: [ExerciseOrderChange]
}

struct ExerciseOrderChange {
    let exerciseId: UUID
    let exerciseName: String
    let oldOrder: Int32
    let newOrder: Int32
}

enum ReorderExerciseSyncStatus {
    case synced
    case pending
    case failed(Error)
    case disabled // Quando SyncWorkoutUseCase n√£o est√° dispon√≠vel
}

// MARK: - ReorderExerciseUseCaseProtocol

protocol ReorderExerciseUseCaseProtocol {
    func execute(_ input: ReorderExerciseInput) async throws -> ReorderExerciseOutput
}

// SyncWorkoutUseCaseProtocol removed - now using real implementation from item 23

// MARK: - ReorderExerciseUseCase

final class ReorderExerciseUseCase: ReorderExerciseUseCaseProtocol {
    
    // MARK: - Properties
    
    private let workoutDataService: WorkoutDataServiceProtocol
    private let syncUseCase: SyncWorkoutUseCaseProtocol?
    
    // MARK: - Initialization
    
    init(
        workoutDataService: WorkoutDataServiceProtocol,
        syncUseCase: SyncWorkoutUseCaseProtocol? = nil // Optional for testing - should be provided in production
    ) {
        self.workoutDataService = workoutDataService
        self.syncUseCase = syncUseCase
        
        print("üîÑ ReorderExerciseUseCase inicializado")
    }
    
    // MARK: - Public Methods
    
    func execute(_ input: ReorderExerciseInput) async throws -> ReorderExerciseOutput {
        print("üîÑ Iniciando reordena√ß√£o de \(input.planExercises.count) exerc√≠cios")
        
        do {
            // 1. Validar entrada
            try input.validate()
            print("‚úÖ Valida√ß√£o de entrada conclu√≠da")
            
            // 2. Obter o plano (garantido pela valida√ß√£o)
            guard let workoutPlan = input.planExercises.first?.plan else {
                throw ReorderExerciseError.planNotFound
            }
            
            // 3. Capturar estado original para tracking
            let orderChanges = captureOrderChanges(input.planExercises)
            
            // 4. Reordenar via WorkoutDataService
            try await workoutDataService.reorderPlanExercises(input.planExercises, in: workoutPlan)
            print("‚úÖ Reordena√ß√£o persistida localmente")
            
            // 5. Tentar sincroniza√ß√£o do plano (se dispon√≠vel)
            let syncStatus = await attemptSyncPlan(workoutPlan)
            
            let output = ReorderExerciseOutput(
                reorderedExercises: input.planExercises,
                workoutPlan: workoutPlan,
                affectedCount: input.planExercises.count,
                syncStatus: syncStatus,
                orderChanges: orderChanges
            )
            
            print("üéâ Reordena√ß√£o de exerc√≠cios conclu√≠da: \(input.planExercises.count) exerc√≠cios no plano \(workoutPlan.displayTitle)")
            logOrderChanges(orderChanges)
            
            return output
            
        } catch let error as ReorderExerciseError {
            print("‚ùå Erro na reordena√ß√£o de exerc√≠cios: \(error.localizedDescription)")
            throw error
        } catch {
            print("‚ùå Erro inesperado na reordena√ß√£o de exerc√≠cios: \(error)")
            throw ReorderExerciseError.reorderFailed(error)
        }
    }
    
    // MARK: - Private Helper Methods
    
    private func captureOrderChanges(_ exercises: [CDPlanExercise]) -> [ExerciseOrderChange] {
        return exercises.enumerated().compactMap { index, exercise in
            let newOrder = Int32(index)
            let oldOrder = exercise.order
            
            // S√≥ registra se houve mudan√ßa
            guard newOrder != oldOrder else { return nil }
            
            return ExerciseOrderChange(
                exerciseId: exercise.safeId,
                exerciseName: exercise.template?.safeName ?? "Exerc√≠cio desconhecido",
                oldOrder: oldOrder,
                newOrder: newOrder
            )
        }
    }
    
    private func attemptSyncPlan(_ plan: CDWorkoutPlan) async -> ReorderExerciseSyncStatus {
        guard let syncUseCase = syncUseCase else {
            print("‚ö†Ô∏è SyncWorkoutUseCase n√£o dispon√≠vel - sincroniza√ß√£o desabilitada")
            return .disabled
        }
        
        print("üîÑ Tentando sincronizar plano ap√≥s reordena√ß√£o de exerc√≠cios...")
        
        do {
            try await syncUseCase.execute(plan)
            print("‚úÖ Plano sincronizado com sucesso ap√≥s reordena√ß√£o de exerc√≠cios")
            return .synced
        } catch {
            print("‚ùå Falha na sincroniza√ß√£o do plano \(plan.displayTitle): \(error)")
            return .failed(error)
        }
    }
    
    private func logOrderChanges(_ changes: [ExerciseOrderChange]) {
        guard !changes.isEmpty else {
            print("‚ÑπÔ∏è Nenhuma mudan√ßa de ordem detectada nos exerc√≠cios")
            return
        }
        
        print("üìã Mudan√ßas de ordem detectadas nos exerc√≠cios:")
        for change in changes {
            print("   ‚Ä¢ \(change.exerciseName): posi√ß√£o \(change.oldOrder) ‚Üí \(change.newOrder)")
        }
    }
}

// MARK: - Convenience Extensions

extension ReorderExerciseUseCase {
    
    /// M√©todo de conveni√™ncia para reordenar exerc√≠cios de um plano espec√≠fico
    func reorderExercisesInPlan(
        _ exercises: [CDPlanExercise],
        plan: CDWorkoutPlan
    ) async throws -> ReorderExerciseOutput {
        let input = ReorderExerciseInput(planExercises: exercises, workoutPlan: plan)
        return try await execute(input)
    }
    
    /// M√©todo de conveni√™ncia para reordenar exerc√≠cios sem valida√ß√£o de plano expl√≠cita
    func reorderExercises(_ exercises: [CDPlanExercise]) async throws -> ReorderExerciseOutput {
        let input = ReorderExerciseInput(planExercises: exercises, workoutPlan: nil)
        return try await execute(input)
    }
} 