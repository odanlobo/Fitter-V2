//
//  StartWorkoutUseCase.swift
//  Fitter V2
//
//  üìã RESPONSABILIDADE: Iniciar sess√£o completa de treino
//  
//  üéØ OPERA√á√ïES PRINCIPAIS:
//  ‚Ä¢ Validar usu√°rio autenticado e plano v√°lido
//  ‚Ä¢ Verificar se n√£o h√° sess√£o ativa conflitante
//  ‚Ä¢ Criar CDCurrentSession via WorkoutDataService
//  ‚Ä¢ Configurar primeiro exerc√≠cio automaticamente
//  ‚Ä¢ Sincronizar dados via SyncWorkoutUseCase
//  ‚Ä¢ Preparar integra√ß√£o com HealthKit (quando dispon√≠vel)
//  ‚Ä¢ Notificar Apple Watch sobre nova sess√£o
//  
//  üèóÔ∏è ARQUITETURA:
//  ‚Ä¢ Protocol + Implementation para testabilidade
//  ‚Ä¢ Dependency Injection: WorkoutDataService + SyncWorkoutUseCase
//  ‚Ä¢ Error handling espec√≠fico com StartWorkoutError enum
//  ‚Ä¢ Input validation com StartWorkoutInput struct
//  ‚Ä¢ Async/await nativo para performance
//  
//  ‚ö° INTEGRA√á√ÉO:
//  ‚Ä¢ WorkoutDataService: Opera√ß√µes CRUD de sess√£o
//  ‚Ä¢ SyncWorkoutUseCase: Sincroniza√ß√£o autom√°tica
//  ‚Ä¢ AuthService: Valida√ß√£o de usu√°rio (ser√° AuthUseCase no item 34)
//  ‚Ä¢ HealthKitManager: Workout sessions (ser√° implementado no item 54)
//  
//  üîÑ LIFECYCLE:
//  1. Valida√ß√£o de entrada (usu√°rio, plano, sess√£o ativa)
//  2. Cria√ß√£o de CDCurrentSession
//  3. Configura√ß√£o do primeiro exerc√≠cio (se existir)
//  4. Sincroniza√ß√£o autom√°tica
//  5. Notifica√ß√£o para Apple Watch
//  6. In√≠cio de workout session HealthKit (futuro)
//
//  Created by Daniel Lobo on 13/05/25.
//

import Foundation
import CoreData

// MARK: - StartWorkoutInput

/// Input para iniciar uma sess√£o de treino
/// Consolida todos os par√¢metros necess√°rios com valida√ß√µes
struct StartWorkoutInput {
    let plan: CDWorkoutPlan
    let user: CDAppUser  // ‚úÖ LOGIN OBRIGAT√ìRIO - BaseViewModel.currentUser nunca nil
    let startTime: Date
    let autoStartFirstExercise: Bool
    let enableHealthKit: Bool
    let backgroundPermissions: Bool
    
    /// Inicializador com valores padr√£o otimizados
    init(
        plan: CDWorkoutPlan,
        user: CDAppUser, // ‚úÖ LOGIN OBRIGAT√ìRIO - BaseViewModel.currentUser nunca nil
        startTime: Date = Date(),
        autoStartFirstExercise: Bool = true,
        enableHealthKit: Bool = true,
        backgroundPermissions: Bool = true
    ) {
        self.plan = plan
        self.user = user
        self.startTime = startTime
        self.autoStartFirstExercise = autoStartFirstExercise
        self.enableHealthKit = enableHealthKit
        self.backgroundPermissions = backgroundPermissions
    }
    
    /// Valida√ß√£o b√°sica de entrada
    var isValid: Bool {
        return !plan.safeId.uuidString.isEmpty && 
               plan.exercisesArray.count > 0
    }
}

// MARK: - StartWorkoutError

/// Erros espec√≠ficos para in√≠cio de treino
enum StartWorkoutError: LocalizedError {
    case planNotFound
    case planEmpty
    case sessionAlreadyActive
    case workoutDataServiceError(Error)
    case syncError(Error)
    case healthKitPermissionDenied
    case healthKitNotAvailable
    case watchConnectivityError
    case invalidInput
    case unknownError(Error)
    
    var errorDescription: String? {
        switch self {
        case .planNotFound:
            return "Plano de treino n√£o encontrado."
        case .planEmpty:
            return "Plano de treino n√£o possui exerc√≠cios. Adicione exerc√≠cios antes de iniciar."
        case .sessionAlreadyActive:
            return "J√° existe uma sess√£o de treino ativa. Finalize o treino atual antes de iniciar um novo."
        case .workoutDataServiceError(let error):
            return "Erro ao salvar dados do treino: \(error.localizedDescription)"
        case .syncError(let error):
            return "Erro na sincroniza√ß√£o: \(error.localizedDescription)"
        case .healthKitPermissionDenied:
            return "Permiss√£o negada para acessar dados de sa√∫de."
        case .healthKitNotAvailable:
            return "HealthKit n√£o est√° dispon√≠vel neste dispositivo."
        case .watchConnectivityError:
            return "Erro na comunica√ß√£o com Apple Watch."
        case .invalidInput:
            return "Dados de entrada inv√°lidos para iniciar treino."
        case .unknownError(let error):
            return "Erro inesperado: \(error.localizedDescription)"
        }
    }
}

// MARK: - StartWorkoutResult

/// Resultado do in√≠cio de treino
struct StartWorkoutResult {
    let session: CDCurrentSession
    let firstExercise: CDCurrentExercise?
    let syncStatus: SyncStatus
    let healthKitStarted: Bool
    let watchNotified: Bool
    
    enum SyncStatus {
        case synced
        case pending
        case failed(Error)
        case disabled
        
        var isSuccessful: Bool {
            switch self {
            case .synced, .pending, .disabled:
                return true
            case .failed:
                return false
            }
        }
    }
}

// MARK: - StartWorkoutUseCaseProtocol

/// Protocolo para in√≠cio de treino (testabilidade)
protocol StartWorkoutUseCaseProtocol {
    func execute(_ input: StartWorkoutInput) async throws -> StartWorkoutResult
    func executeQuickStart(plan: CDWorkoutPlan, user: CDAppUser) async throws -> StartWorkoutResult
    func canStartWorkout(for user: CDAppUser) async throws -> Bool
    func validateWorkoutPlan(_ plan: CDWorkoutPlan) -> Bool
}

// MARK: - StartWorkoutUseCase

/// Use Case para iniciar sess√£o completa de treino
/// Orquestra todas as opera√ß√µes necess√°rias para come√ßar um treino
final class StartWorkoutUseCase: StartWorkoutUseCaseProtocol {
    
    // MARK: - Dependencies
    
    private let workoutDataService: WorkoutDataServiceProtocol
    private let syncWorkoutUseCase: SyncWorkoutUseCaseProtocol
    // TODO: Adicionar AuthUseCase quando item 34 for implementado
    // private let authUseCase: AuthUseCaseProtocol
    // TODO: Adicionar HealthKitManager quando item 54 for implementado
    // private let healthKitManager: HealthKitManagerProtocol
    
    // MARK: - Initialization
    
    init(
        workoutDataService: WorkoutDataServiceProtocol,
        syncWorkoutUseCase: SyncWorkoutUseCaseProtocol
    ) {
        self.workoutDataService = workoutDataService
        self.syncWorkoutUseCase = syncWorkoutUseCase
    }
    
    // MARK: - Public Methods
    
    /// Executa in√≠cio completo de treino com valida√ß√µes robustas
    func execute(_ input: StartWorkoutInput) async throws -> StartWorkoutResult {
        print("üöÄ [START WORKOUT] Iniciando treino: \(input.plan.displayTitle)")
        
        // 1. Valida√ß√£o de entrada
        try await validateInput(input)
        
        // 2. Verificar se usu√°rio pode iniciar treino
        let canStart = try await canStartWorkout(for: input.user)
        
        guard canStart else {
            throw StartWorkoutError.sessionAlreadyActive
        }
        
        // 3. Criar sess√£o de treino
        print("üìù [START WORKOUT] Criando sess√£o para usu√°rio: \(input.user.safeName)")
        let session: CDCurrentSession
        do {
            session = try await workoutDataService.createCurrentSession(
                for: input.plan,
                user: input.user,
                startTime: input.startTime
            )
        } catch {
            throw StartWorkoutError.workoutDataServiceError(error)
        }
        
        // 4. Configurar primeiro exerc√≠cio (se solicitado)
        var firstExercise: CDCurrentExercise? = nil
        if input.autoStartFirstExercise && !input.plan.exercisesArray.isEmpty {
            firstExercise = try await startFirstExercise(in: session)
        }
        
        // 5. Sincroniza√ß√£o autom√°tica
        let syncStatus = await performSync(session: session)
        
        // 6. Integra√ß√£o com HealthKit (futuro)
        let healthKitStarted = await startHealthKitSession(input: input, session: session)
        
        // 7. Notificar Apple Watch
        let watchNotified = await notifyAppleWatch(session: session)
        
        let result = StartWorkoutResult(
            session: session,
            firstExercise: firstExercise,
            syncStatus: syncStatus,
            healthKitStarted: healthKitStarted,
            watchNotified: watchNotified
        )
        
        print("‚úÖ [START WORKOUT] Treino iniciado com sucesso")
        print("üìä [START WORKOUT] Health: \(healthKitStarted), Watch: \(watchNotified), Sync: \(syncStatus.isSuccessful)")
        
        return result
    }
    
    /// M√©todo de conveni√™ncia para in√≠cio r√°pido
    func executeQuickStart(plan: CDWorkoutPlan, user: CDAppUser) async throws -> StartWorkoutResult {
        let input = StartWorkoutInput(plan: plan, user: user)
        return try await execute(input)
    }
    
    /// Verifica se usu√°rio pode iniciar treino (sem sess√£o ativa)
    func canStartWorkout(for user: CDAppUser) async throws -> Bool {
        do {
            let activeSessions = try await workoutDataService.fetchCurrentSessions(for: user)
            let hasActiveSession = activeSessions.contains { $0.isActive }
            return !hasActiveSession
        } catch {
            throw StartWorkoutError.workoutDataServiceError(error)
        }
    }
    
    /// Valida se plano de treino √© adequado para iniciar
    func validateWorkoutPlan(_ plan: CDWorkoutPlan) -> Bool {
        guard !plan.safeId.uuidString.isEmpty else { return false }
        guard !plan.exercisesArray.isEmpty else { return false }
        
        // Verifica se todos os exerc√≠cios t√™m templates v√°lidos
        for planExercise in plan.exercisesArray {
            guard let template = planExercise.template,
                  !template.safeName.isEmpty else {
                return false
            }
        }
        
        return true
    }
    
    // MARK: - Private Methods
    
    /// Valida√ß√£o robusta de entrada
    private func validateInput(_ input: StartWorkoutInput) async throws {
        guard input.isValid else {
            throw StartWorkoutError.invalidInput
        }
        
        guard validateWorkoutPlan(input.plan) else {
            if input.plan.exercisesArray.isEmpty {
                throw StartWorkoutError.planEmpty
            } else {
                throw StartWorkoutError.planNotFound
            }
        }
    }
    
    /// Inicia primeiro exerc√≠cio automaticamente
    private func startFirstExercise(in session: CDCurrentSession) async throws -> CDCurrentExercise? {
        guard let firstPlanExercise = session.plan?.exercisesArray.first,
              let template = firstPlanExercise.template else {
            print("‚ö†Ô∏è [START WORKOUT] Primeiro exerc√≠cio n√£o encontrado")
            return nil
        }
        
        print("üèÉ‚Äç‚ôÇÔ∏è [START WORKOUT] Iniciando primeiro exerc√≠cio: \(template.safeName)")
        
        do {
            let exercise = try await workoutDataService.createCurrentExercise(
                for: template,
                in: session,
                startTime: Date()
            )
            return exercise
        } catch {
            print("‚ùå [START WORKOUT] Erro ao iniciar primeiro exerc√≠cio: \(error)")
            // N√£o falha o treino por causa do exerc√≠cio
            return nil
        }
    }
    
    /// Sincroniza√ß√£o com tratamento de erro
    private func performSync(session: CDCurrentSession) async -> StartWorkoutResult.SyncStatus {
        do {
            let result = try await syncWorkoutUseCase.execute(.upload)
            
            switch result {
            case .success:
                print("‚úÖ [START WORKOUT] Sess√£o sincronizada")
                return .synced
            case .failure(let error):
                print("‚ö†Ô∏è [START WORKOUT] Falha na sincroniza√ß√£o: \(error.localizedDescription)")
                return .failed(error)
            }
        } catch {
            print("‚ùå [START WORKOUT] Erro na sincroniza√ß√£o: \(error)")
            return .failed(error)
        }
    }
    
    /// Integra√ß√£o com HealthKit (prepara√ß√£o para item 54)
    private func startHealthKitSession(input: StartWorkoutInput, session: CDCurrentSession) async -> Bool {
        guard input.enableHealthKit else {
            print("‚ÑπÔ∏è [START WORKOUT] HealthKit desabilitado pelo usu√°rio")
            return false
        }
        
        print("üè• [START WORKOUT] HealthKit ser√° integrado no item 54")
        // TODO: Implementar quando HealthKitManager estiver dispon√≠vel
        // guard let healthKitManager = self.healthKitManager else { return false }
        // 
        // do {
        //     let workoutType = HKWorkoutActivityType.traditionalStrengthTraining
        //     try await healthKitManager.startWorkoutSession(
        //         type: workoutType,
        //         session: session,
        //         backgroundPermissions: input.backgroundPermissions
        //     )
        //     return true
        // } catch {
        //     print("‚ùå [START WORKOUT] HealthKit error: \(error)")
        //     return false
        // }
        
        return false // Tempor√°rio at√© item 54
    }
    
    /// Notifica√ß√£o para Apple Watch
    private func notifyAppleWatch(session: CDCurrentSession) async -> Bool {
        #if os(iOS)
        print("‚åö [START WORKOUT] Notificando Apple Watch sobre nova sess√£o")
        
        // Integra√ß√£o com ConnectivityManager existente
        guard let connectivityManager = getConnectivityManager() else {
            print("‚ö†Ô∏è [START WORKOUT] ConnectivityManager n√£o dispon√≠vel")
            return false
        }
        
        let sessionContext: [String: Any] = [
            "type": "sessionStarted",
            "sessionId": session.safeId.uuidString,
            "planId": session.plan?.safeId.uuidString ?? "",
            "planTitle": session.plan?.displayTitle ?? "",
            "startTime": session.startTime.timeIntervalSince1970,
            "exerciseCount": session.plan?.exercisesArray.count ?? 0,
            "firstExerciseName": session.plan?.exercisesArray.first?.template?.safeName ?? ""
        ]
        
        await connectivityManager.sendMessage(sessionContext, replyHandler: nil)
        return true
        #else
        print("‚ÑπÔ∏è [START WORKOUT] Watch notification skipped (watchOS)")
        return false
        #endif
    }
    
    /// Helper para obter ConnectivityManager
    private func getConnectivityManager() -> ConnectivityManager? {
        #if os(iOS)
        return ConnectivityManager.shared
        #else
        return nil
        #endif
    }
}

// MARK: - Convenience Extensions

extension StartWorkoutUseCase {
    
    /// Inicia treino com configura√ß√µes padr√£o
    func startDefaultWorkout(plan: CDWorkoutPlan, user: CDAppUser) async throws -> StartWorkoutResult {
        return try await executeQuickStart(plan: plan, user: user)
    }
    
    /// Inicia treino sem iniciar primeiro exerc√≠cio automaticamente
    func startWorkoutPlanOnly(plan: CDWorkoutPlan, user: CDAppUser) async throws -> StartWorkoutResult {
        let input = StartWorkoutInput(
            plan: plan,
            user: user,
            autoStartFirstExercise: false
        )
        return try await execute(input)
    }
    
    /// Inicia treino sem HealthKit
    func startWorkoutWithoutHealthKit(plan: CDWorkoutPlan, user: CDAppUser) async throws -> StartWorkoutResult {
        let input = StartWorkoutInput(
            plan: plan,
            user: user,
            enableHealthKit: false
        )
        return try await execute(input)
    }
}

// MARK: - Error Recovery

extension StartWorkoutUseCase {
    
    /// Recupera de sess√£o ativa √≥rf√£
    /// - Parameter user: Usu√°rio autenticado (deve vir do ViewModel via BaseViewModel.currentUser)
    func recoverFromOrphanSession(for user: CDAppUser) async throws -> Bool {
        do {
            let activeSessions = try await workoutDataService.fetchCurrentSessions(for: user)
            
            for session in activeSessions where session.isActive {
                // Finaliza sess√µes √≥rf√£s
                try await workoutDataService.updateCurrentSession(session, endTime: Date())
                print("üîß [START WORKOUT] Sess√£o √≥rf√£ finalizada: \(session.safeId)")
            }
            
            return true
        } catch {
            print("‚ùå [START WORKOUT] Erro ao recuperar sess√µes √≥rf√£s: \(error)")
            return false
        }
    }
} 