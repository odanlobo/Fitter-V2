//
//  ConnectivityManager.swift
//  Fitter V2
//
//  üìã GERENCIADOR DE CONECTIVIDADE REFATORADO (ITEM 43.3 DA REFATORA√á√ÉO)
//  
//  üéØ OBJETIVO: Remover toda l√≥gica WCSession e manter apenas monitoramento de rede
//  ‚Ä¢ ANTES: WCSession + processamento de dados + sincroniza√ß√£o de treinos
//  ‚Ä¢ DEPOIS: Apenas NWPathMonitor + estados de conectividade
//  ‚Ä¢ BENEF√çCIO: Responsabilidades claras, sem duplica√ß√£o com WatchSessionManager/PhoneSessionManager
//  
//  üîÑ ARQUITETURA LIMPA:
//  1. NWPathMonitor: Monitoramento de rede (WiFi/Cellular/Ethernet)
//  2. Publisher Combine: Estados online/offline reativo para UI
//  3. Sem WCSession: Delegado para WatchSessionManager/PhoneSessionManager
//  4. Sem processamento: Delegado para Use Cases espec√≠ficos
//  5. Foco √∫nico: Status de conectividade de rede
//  
//  ‚ö° RESPONSABILIDADES REMOVIDAS:
//  ‚Ä¢ Comunica√ß√£o Watch-iPhone ‚Üí WatchSessionManager/PhoneSessionManager
//  ‚Ä¢ Processamento de dados de sensores ‚Üí Use Cases espec√≠ficos
//  ‚Ä¢ Sincroniza√ß√£o de treinos ‚Üí CloudSyncManager
//  ‚Ä¢ Gerenciamento de sess√£o Watch ‚Üí WatchSessionManager
//  ‚Ä¢ Processamento de mensagens ‚Üí PhoneSessionManager
//
//  Created by Daniel Lobo on 13/05/25.
//  Refatorado em 15/12/25 - ITEM 43.3 ‚úÖ
//

import Foundation
import Network
import Combine

/// Erros espec√≠ficos para ConnectivityManager
enum ConnectivityError: LocalizedError {
    case networkUnavailable
    case monitoringFailed(Error)
    case invalidNetworkType
    
    var errorDescription: String? {
        switch self {
        case .networkUnavailable:
            return "Rede n√£o dispon√≠vel"
        case .monitoringFailed(let error):
            return "Falha no monitoramento: \(error.localizedDescription)"
        case .invalidNetworkType:
            return "Tipo de rede inv√°lido"
        }
    }
}

/// Tipos de conectividade de rede
enum NetworkType: String, CaseIterable {
    case wifi = "WiFi"
    case cellular = "Cellular"
    case ethernet = "Ethernet"
    case unknown = "Unknown"
    case unavailable = "Unavailable"
    
    var isConnected: Bool {
        self != .unavailable
    }
    
    var isReachable: Bool {
        self == .wifi || self == .cellular || self == .ethernet
    }
}

/// Protocolo para ConnectivityManager
protocol ConnectivityManagerProtocol: AnyObject {
    var isConnected: Bool { get }
    var networkType: NetworkType { get }
    var isReachable: Bool { get }
    
    func startMonitoring() async
    func stopMonitoring() async
    func checkConnectivity() async throws -> Bool
}

/// Gerenciador de conectividade de rede
/// 
/// Responsabilidades:
/// - Monitoramento de conectividade de rede (WiFi/Cellular/Ethernet)
/// - Estados online/offline reativo para UI
/// - Sem WCSession (delegado para WatchSessionManager/PhoneSessionManager)
/// - Sem processamento (delegado para Use Cases espec√≠ficos)
/// 
/// ‚ö° Clean Architecture:
/// - Implementa NWPathMonitor
/// - Delega comunica√ß√£o para WatchSessionManager/PhoneSessionManager
/// - Delega processamento para Use Cases espec√≠ficos
/// - Foco apenas em status de conectividade de rede
@MainActor
final class ConnectivityManager: ConnectivityManagerProtocol {
    
    // MARK: - Published Properties
    
    /// Indica se h√° conectividade de rede
    @Published private(set) var isConnected: Bool = false
    
    /// Tipo de rede atual
    @Published private(set) var networkType: NetworkType = .unavailable
    
    /// Indica se a rede est√° alcan√ß√°vel
    @Published private(set) var isReachable: Bool = false
    
    // MARK: - Private Properties
    
    /// Monitor de caminho de rede
    private let pathMonitor = NWPathMonitor()
    
    /// Fila para opera√ß√µes de monitoramento
    private let monitorQueue = DispatchQueue(label: "ConnectivityMonitor", qos: .utility)
    
    /// Combine cancellables
    private var cancellables = Set<AnyCancellable>()
    
    /// Logger para debug
    private let logger = Logger(subsystem: "com.fitter.app", category: "ConnectivityManager")
    
    // MARK: - Initialization
    
    init() {
        setupPathMonitorSync()
        print("üåê ConnectivityManager inicializado")
    }
    
    deinit {
        // Opera√ß√£o s√≠ncrona para cleanup no deinit
        pathMonitor.cancel()
        cancellables.removeAll()
        print("üõë ConnectivityManager deinitializado")
    }
    
    // MARK: - Public Methods
    
    /// Inicia o monitoramento de conectividade
    func startMonitoring() async {
        guard pathMonitor.pathUpdateHandler == nil else {
            logger.info("‚ö†Ô∏è Monitoramento j√° est√° ativo")
            return
        }
        
        await setupPathMonitorHandler()
        pathMonitor.start(queue: monitorQueue)
        logger.info("üîÑ Monitoramento de conectividade iniciado")
    }
    
    /// Para o monitoramento de conectividade
    func stopMonitoring() async {
        pathMonitor.cancel()
        logger.info("üõë Monitoramento de conectividade parado")
    }
    
    /// Verifica conectividade de forma ass√≠ncrona
    func checkConnectivity() async throws -> Bool {
        return await withCheckedContinuation { continuation in
            pathMonitor.pathUpdateHandler = { [weak self] path in
                Task { @MainActor in
                    let isConnected = path.status == .satisfied
                    continuation.resume(returning: isConnected)
                    self?.pathMonitor.pathUpdateHandler = nil
                }
            }
        }
    }
    
    // MARK: - Private Methods
    
    /// Configura o monitor de caminho de rede (vers√£o s√≠ncrona para init)
    private func setupPathMonitorSync() {
        pathMonitor.pathUpdateHandler = { [weak self] path in
            Task { @MainActor in
                await self?.handlePathUpdate(path)
            }
        }
    }
    
    /// Configura o monitor de caminho de rede (vers√£o async para startMonitoring)
    private func setupPathMonitorHandler() async {
        pathMonitor.pathUpdateHandler = { [weak self] path in
            Task { @MainActor in
                await self?.handlePathUpdate(path)
            }
        }
    }
    
    /// Processa atualiza√ß√£o do caminho de rede
    private func handlePathUpdate(_ path: NWPath) async {
        let wasConnected = isConnected
        let wasReachable = isReachable
        let oldNetworkType = networkType
        
        // Atualiza estado de conectividade
        isConnected = path.status == .satisfied
        isReachable = path.status == .satisfied
        
        // Determina tipo de rede
        networkType = determineNetworkType(path)
        
        // Log de mudan√ßas
        if isConnected != wasConnected {
            logger.info("üåê Conectividade alterada: \(isConnected ? "Conectado" : "Desconectado")")
        }
        
        if networkType != oldNetworkType {
            logger.info("üì° Tipo de rede alterado: \(networkType.rawValue)")
        }
        
        if isReachable != wasReachable {
            logger.info("üì∂ Alcance alterado: \(isReachable ? "Alcan√ß√°vel" : "Inalcan√ß√°vel")")
        }
        
        // Notifica mudan√ßas para UI
        notifyConnectivityChange()
    }
    
    /// Determina o tipo de rede baseado no caminho
    private func determineNetworkType(_ path: NWPath) -> NetworkType {
        if path.usesInterfaceType(.wifi) {
            return .wifi
        } else if path.usesInterfaceType(.cellular) {
            return .cellular
        } else if path.usesInterfaceType(.wiredEthernet) {
            return .ethernet
        } else if path.status == .satisfied {
            return .unknown
        } else {
            return .unavailable
        }
    }
    
    /// Notifica mudan√ßas de conectividade
    private func notifyConnectivityChange() {
        // Publica mudan√ßas via Combine (j√° configurado via @Published)
        logger.info("üì¢ Mudan√ßa de conectividade notificada: \(networkType.rawValue)")
    }
}

// MARK: - Shared Instance

extension ConnectivityManager {
    /// Inst√¢ncia compartilhada do ConnectivityManager
    static let shared = ConnectivityManager()
}

// MARK: - Convenience Extensions

extension ConnectivityManager {
    
    /// Verifica se est√° conectado via WiFi
    var isWiFiConnected: Bool {
        return networkType == .wifi && isConnected
    }
    
    /// Verifica se est√° conectado via Cellular
    var isCellularConnected: Bool {
        return networkType == .cellular && isConnected
    }
    
    /// Verifica se est√° conectado via Ethernet
    var isEthernetConnected: Bool {
        return networkType == .ethernet && isConnected
    }
    
    /// Retorna descri√ß√£o da conectividade atual
    var connectivityDescription: String {
        if !isConnected {
            return "Sem conectividade"
        }
        
        switch networkType {
        case .wifi:
            return "Conectado via WiFi"
        case .cellular:
            return "Conectado via Cellular"
        case .ethernet:
            return "Conectado via Ethernet"
        case .unknown:
            return "Conectado (tipo desconhecido)"
        case .unavailable:
            return "Sem conectividade"
        }
    }
}

// MARK: - Logger

private struct Logger {
    private let subsystem: String
    private let category: String
    
    init(subsystem: String, category: String) {
        self.subsystem = subsystem
        self.category = category
    }
    
    func info(_ message: String) {
        print("üåê [\(category)] \(message)")
    }
    
    func warning(_ message: String) {
        print("‚ö†Ô∏è [\(category)] \(message)")
    }
    
    func error(_ message: String) {
        print("‚ùå [\(category)] \(message)")
    }
}

#if DEBUG
// MARK: - Preview Support
extension ConnectivityManager {
    
    /// Cria inst√¢ncia para preview
    /// - Returns: ConnectivityManager configurado para preview
    static func previewInstance() -> ConnectivityManager {
        let manager = ConnectivityManager()
        manager.isConnected = true
        manager.networkType = .wifi
        manager.isReachable = true
        return manager
    }
}
#endif 