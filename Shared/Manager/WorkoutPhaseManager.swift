//
//  WorkoutPhaseManager.swift
//  Fitter V2 (Shared)
//
//  REFATORADO em 04/01/25 - Apenas controle de estado
//  RESPONSABILIDADE: Controle simples de estados execu√ß√£o/descanso
//  ARQUITETURA: StateManager puro - sem l√≥gicas complexas
//  COMPATIBILIDADE: iOS + watchOS compartilhado
//

import Foundation
import Combine

#if os(iOS)
import UIKit
#elseif os(watchOS)
import WatchKit
#endif

// MARK: - Types

/// Fase do workout (compartilhada entre iOS e watchOS)
public enum WorkoutPhase: String, CaseIterable, Codable {
    case execution = "execution"
    case rest = "rest"
    
    public var samplingRate: Double {
        switch self {
        case .execution: return 50.0  // 0.02s - Alta frequ√™ncia para captura precisa
        case .rest: return 20.0       // 0.05s - Frequ√™ncia reduzida para economia
        }
    }
    
    public var description: String {
        switch self {
        case .execution: return "Execu√ß√£o"
        case .rest: return "Descanso"
        }
    }
}

/// Gatilho para mudan√ßa de fase
public enum PhaseTrigger: String, CaseIterable, Codable {
    case automatic = "automatic"      // Detec√ß√£o autom√°tica via sensores
    case manual = "manual"           // A√ß√£o manual do usu√°rio
    case timer = "timer"             // Timer de descanso finalizado
    case system = "system"           // Sistema (start/end workout)
    
    public var description: String {
        switch self {
        case .automatic: return "Detec√ß√£o autom√°tica"
        case .manual: return "Manual do usu√°rio"
        case .timer: return "Timer finalizado"
        case .system: return "Sistema"
        }
    }
}

/// Event de mudan√ßa de fase
public struct PhaseChangeEvent {
    public let fromPhase: WorkoutPhase
    public let toPhase: WorkoutPhase
    public let trigger: PhaseTrigger
    public let timestamp: Date
    
    public init(fromPhase: WorkoutPhase, toPhase: WorkoutPhase, trigger: PhaseTrigger, timestamp: Date = Date()) {
        self.fromPhase = fromPhase
        self.toPhase = toPhase
        self.trigger = trigger
        self.timestamp = timestamp
    }
}

// MARK: - Protocol

/// Protocolo para WorkoutPhaseManager (testabilidade)
public protocol WorkoutPhaseManagerProtocol: ObservableObject {
    var currentPhase: WorkoutPhase { get }
    var isWorkoutActive: Bool { get }
    
    /// Publisher para observar mudan√ßas de fase
    var phaseChangePublisher: AnyPublisher<PhaseChangeEvent, Never> { get }
    
    /// Atualiza a fase do workout
    func updatePhase(_ phase: WorkoutPhase, trigger: PhaseTrigger) async
    
    /// Inicia controle de sess√£o
    func startSession() async
    
    /// Finaliza controle de sess√£o
    func endSession() async
    
    /// Reseta o estado para inicial
    func reset() async
}

// MARK: - WorkoutPhaseManager

/// Gerenciador simples de fases de workout (Compartilhado iOS + watchOS)
/// 
/// **RESPONSABILIDADES REDUZIDAS:**
/// - ‚úÖ Controlar fase atual (execution/rest)
/// - ‚úÖ Notificar mudan√ßas de fase via Combine
/// - ‚úÖ Validar transi√ß√µes de estado
/// - ‚úÖ Sincronizar estado entre dispositivos
/// 
/// **‚ùå N√ÉO GERENCIA MAIS:**
/// - ‚ùå Timers de descanso (delegado para TimerService)
/// - ‚ùå A√ß√µes autom√°ticas (delegado para Use Cases)
/// - ‚ùå L√≥gica de neg√≥cio (delegado para Use Cases)
/// - ‚ùå Comunica√ß√£o complexa (delegado para SessionManagers)
/// 
/// **üéØ FOCO:** Apenas estado reativo e simples
@MainActor
public final class WorkoutPhaseManager: ObservableObject, WorkoutPhaseManagerProtocol {
    
    // MARK: - Singleton (compatibilidade tempor√°ria)
    public static let shared = WorkoutPhaseManager()
    
    // MARK: - Published Properties
    
    /// Fase atual do workout
    @Published public private(set) var currentPhase: WorkoutPhase = .execution
    
    /// Indica se h√° uma sess√£o de workout ativa
    @Published public private(set) var isWorkoutActive: Bool = false
    
    // MARK: - Private Properties
    
    /// Subject para mudan√ßas de fase
    private let phaseChangeSubject = PassthroughSubject<PhaseChangeEvent, Never>()
    
    /// Combine cancellables
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Publishers
    
    /// Publisher para observar mudan√ßas de fase
    public var phaseChangePublisher: AnyPublisher<PhaseChangeEvent, Never> {
        phaseChangeSubject.eraseToAnyPublisher()
    }
    
    // MARK: - Initialization
    
    public override init() {
        super.init()
        print("üîÑ WorkoutPhaseManager inicializado (estado puro)")
    }
    
    // MARK: - Public Methods
    
    /// Atualiza a fase do workout
    /// - Parameters:
    ///   - phase: Nova fase
    ///   - trigger: Gatilho da mudan√ßa
    public func updatePhase(_ phase: WorkoutPhase, trigger: PhaseTrigger) async {
        guard phase != currentPhase else {
            print("üîÑ [PHASE] Fase j√° est√° em \(phase.description)")
            return
        }
        
        guard isWorkoutActive else {
            print("‚ö†Ô∏è [PHASE] Tentativa de mudar fase sem sess√£o ativa")
            return
        }
        
        print("üîÑ [PHASE] Mudando de \(currentPhase.description) para \(phase.description) (\(trigger.description))")
        
        // Validar transi√ß√£o
        guard isValidPhaseTransition(from: currentPhase, to: phase) else {
            print("‚ùå [PHASE] Transi√ß√£o inv√°lida: \(currentPhase.description) ‚Üí \(phase.description)")
            return
        }
        
        // Criar event de mudan√ßa
        let event = PhaseChangeEvent(
            fromPhase: currentPhase,
            toPhase: phase,
            trigger: trigger
        )
        
        // Atualizar estado
        currentPhase = phase
        
        // Notificar observadores
        phaseChangeSubject.send(event)
        
        print("‚úÖ [PHASE] Fase atualizada: \(phase.description)")
    }
    
    /// Inicia controle de sess√£o
    public func startSession() async {
        print("üèãÔ∏è‚Äç‚ôÇÔ∏è [PHASE] Iniciando controle de sess√£o")
        
        // Resetar estado
        currentPhase = .execution
        isWorkoutActive = true
        
        print("‚úÖ [PHASE] Controle de sess√£o iniciado")
    }
    
    /// Finaliza controle de sess√£o
    public func endSession() async {
        print("üèÅ [PHASE] Finalizando controle de sess√£o")
        
        // Resetar estado
        isWorkoutActive = false
        currentPhase = .execution
        
        print("‚úÖ [PHASE] Controle de sess√£o finalizado")
    }
    
    /// Reseta o estado para inicial
    public func reset() async {
        print("üîÑ [PHASE] Resetando estado")
        
        currentPhase = .execution
        isWorkoutActive = false
        
        print("‚úÖ [PHASE] Estado resetado")
    }
    
    // MARK: - Private Methods
    
    /// Valida transi√ß√£o de fase
    /// - Parameters:
    ///   - from: Fase atual
    ///   - to: Nova fase
    /// - Returns: True se transi√ß√£o √© v√°lida
    private func isValidPhaseTransition(from: WorkoutPhase, to: WorkoutPhase) -> Bool {
        // Todas as transi√ß√µes execution ‚Üî rest s√£o v√°lidas
        // L√≥gica de valida√ß√£o mais complexa pode ser adicionada aqui no futuro
        return true
    }
}

// MARK: - Convenience Extensions

public extension WorkoutPhaseManager {
    
    /// Indica se est√° em fase de execu√ß√£o
    var isInExecution: Bool {
        return currentPhase == .execution && isWorkoutActive
    }
    
    /// Indica se est√° em fase de descanso
    var isInRest: Bool {
        return currentPhase == .rest && isWorkoutActive
    }
    
    /// Frequ√™ncia de captura atual
    var currentSamplingRate: Double {
        return currentPhase.samplingRate
    }
    
    /// Atualiza para execu√ß√£o (convenience method)
    func switchToExecution(trigger: PhaseTrigger = .manual) async {
        await updatePhase(.execution, trigger: trigger)
    }
    
    /// Atualiza para descanso (convenience method)
    func switchToRest(trigger: PhaseTrigger = .manual) async {
        await updatePhase(.rest, trigger: trigger)
    }
}

// MARK: - Debug Extensions

public extension WorkoutPhaseManager {
    
    /// Retorna estat√≠sticas de debug
    var debugInfo: String {
        """
        üîÑ WorkoutPhaseManager (Simples):
        - Fase atual: \(currentPhase.description)
        - Frequ√™ncia: \(currentPhase.samplingRate)Hz
        - Sess√£o ativa: \(isWorkoutActive ? "Sim" : "N√£o")
        - Em execu√ß√£o: \(isInExecution ? "Sim" : "N√£o")
        - Em descanso: \(isInRest ? "Sim" : "N√£o")
        """
    }
}

