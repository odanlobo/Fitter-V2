//
//  SessionManager.swift
//  Fitter V2
//
//  Created by Daniel Lobo on 13/05/25.
//

import Foundation
import Combine
import CoreData

/// Gerenciador de sess√µes ativas do app
/// Controla o estado da sess√£o atual e coordena com Watch/Core Data
/// 
/// ‚ö†Ô∏è REFATORA√á√ÉO EM ANDAMENTO:
/// - L√≥gica de neg√≥cio ser√° migrada para Use Cases futuros
/// - Estados reduzidos conforme Clean Architecture
/// 
/// ‚úÖ ARQUITETURA LOGIN OBRIGAT√ìRIO:
/// - Usu√°rio sempre dispon√≠vel ap√≥s login inicial
/// - Sess√µes sempre vinculadas ao usu√°rio autenticado
/// - Ownership garantido em todas as opera√ß√µes
@MainActor
final class SessionManager: ObservableObject {
    static let shared = SessionManager()
    
    // MARK: - Estados simplificados
    @Published var currentSession: CDCurrentSession?
    @Published var isSessionActive: Bool = false
    
    // ‚úÖ LOGIN OBRIGAT√ìRIO: Refer√™ncia ao usu√°rio atual (nunca nil ap√≥s login)
    // TODO: Injetar via AuthService/BaseViewModel no futuro
    private var _currentUser: CDAppUser?
    
    // MARK: - Depend√™ncias atualizadas
    private var viewContext: NSManagedObjectContext {
        return PersistenceController.shared.viewContext
    }
    
    #if os(iOS)
    private let connectivityManager = ConnectivityManager.shared
    private var cancellables = Set<AnyCancellable>()
    #endif
    
    private init() {
        // Carrega sess√£o ativa existente
        loadActiveSession()
        
        #if os(iOS)
        setupSessionObserver()
        #endif
    }
    
    // MARK: - Configura√ß√£o LOGIN OBRIGAT√ìRIO
    
    /// Configura usu√°rio atual (chamado ap√≥s login bem-sucedido)
    /// ‚úÖ LOGIN OBRIGAT√ìRIO: Garante que usu√°rio nunca seja nil
    /// - Parameter user: Usu√°rio autenticado (obrigat√≥rio)
    func setCurrentUser(_ user: CDAppUser) {
        _currentUser = user
        print("‚úÖ SessionManager: Usu√°rio configurado - \(user.safeName)")
    }
    
    /// Limpa usu√°rio atual (chamado durante logout)
    /// ‚ö†Ô∏è Usado apenas durante logout manual ou por inatividade
    func clearCurrentUser() {
        _currentUser = nil
        print("üîí SessionManager: Usu√°rio limpo")
    }
    
    // MARK: - Gerenciamento de Sess√£o
    // TODO: Migrar para StartWorkoutUseCase (item 16)
    /// Inicia uma nova sess√£o de treino
    func startSession(for user: CDAppUser, with plan: CDWorkoutPlan) -> Bool {
        // Verifica se j√° h√° uma sess√£o ativa
        guard currentSession == nil else {
            return false // Apenas uma sess√£o ativa por vez
        }
        
        // Cria nova sess√£o usando o m√©todo do CDAppUser
        guard let newSession = user.startWorkout(with: plan, context: viewContext) else {
            return false
        }
        
        // Salva no Core Data
        do {
            try viewContext.save()
            self.currentSession = newSession
            self.isSessionActive = true
            
            #if os(iOS)
            // Notifica o Watch sobre a nova sess√£o
            Task {
                await sendSessionContextToWatch()
            }
            #endif
            
            print("‚úÖ Sess√£o iniciada para o plano: \(plan.displayTitle)")
            return true
        } catch {
            print("‚ùå Erro ao iniciar sess√£o: \(error)")
            return false
        }
    }
    
    // TODO: Migrar para EndWorkoutUseCase (item 25) ‚úÖ **CONCLU√çDO**
    /// Finaliza a sess√£o atual
    func endSession() {
        guard let session = currentSession,
              let user = session.user else { return }
        
        // Usa o m√©todo do CDAppUser para finalizar
        user.endWorkout(context: viewContext)
        
        // Salva as mudan√ßas
        do {
            try viewContext.save()
            print("‚úÖ Sess√£o finalizada com sucesso")
        } catch {
            print("‚ùå Erro ao finalizar sess√£o: \(error)")
        }
        
        // Limpa o estado
        self.currentSession = nil
        self.isSessionActive = false
        
        #if os(iOS)
        // Notifica o Watch que a sess√£o acabou
        Task {
            await sendSessionEndToWatch()
        }
        #endif
    }
    
    // ‚ùå M√âTODOS REMOVIDOS: Violavam o fluxo granular
    // ‚úÖ Use StartExerciseUseCase.executeNextExercise() para pr√≥ximo exerc√≠cio
    // ‚úÖ Use EndExerciseUseCase.execute() seguido de StartExerciseUseCase para navega√ß√£o
    // ‚úÖ Use StartSetUseCase.execute() para iniciar s√©ries (item 28)
    // ‚úÖ Use EndSetUseCase.execute() para finalizar s√©ries (item 29)
    //
    // üîÑ FLUXO GRANULAR CORRETO:
    // StartExerciseUseCase ‚Üí [LOOP: StartSetUseCase ‚Üí EndSetUseCase] ‚Üí EndExerciseUseCase ‚Üí (repetir ou EndWorkoutUseCase)
    
    // TODO: Migrar para UpdateSensorDataUseCase (futuro)
    /// Atualiza dados de sensores da s√©rie atual
    func updateSensorData(
        rotation: (x: Double, y: Double, z: Double),
        acceleration: (x: Double, y: Double, z: Double),
        gravity: (x: Double, y: Double, z: Double),
        attitude: (roll: Double, pitch: Double, yaw: Double)
    ) {
        currentSession?.currentExercise?.currentSet?.updateSensorData(
            rotationX: rotation.x, rotationY: rotation.y, rotationZ: rotation.z,
            accelerationX: acceleration.x, accelerationY: acceleration.y, accelerationZ: acceleration.z,
            gravityX: gravity.x, gravityY: gravity.y, gravityZ: gravity.z,
            attitudeRoll: attitude.roll, attitudePitch: attitude.pitch, attitudeYaw: attitude.yaw
        )
    }
    
    // TODO: Migrar para UpdateHealthDataUseCase (futuro)
    /// Atualiza dados fisiol√≥gicos da s√©rie atual
    func updateHealthData(heartRate: Int?, caloriesBurned: Double?) {
        currentSession?.currentExercise?.currentSet?.updateHealthData(
            heartRate: heartRate,
            caloriesBurned: caloriesBurned
        )
    }
    
    // MARK: - M√©todos Privados
    
    /// Carrega sess√£o ativa se existir na inicializa√ß√£o
    private func loadActiveSession() {
        let request: NSFetchRequest<CDCurrentSession> = CDCurrentSession.fetchRequest()
        request.predicate = NSPredicate(format: "isActive == true")
        request.fetchLimit = 1
        
        do {
            if let activeSession = try viewContext.fetch(request).first {
                self.currentSession = activeSession
                self.isSessionActive = true
                
                #if os(iOS)
                // Se h√° uma sess√£o ativa ao carregar, notifica o Watch
                Task {
                    await sendSessionContextToWatch()
                }
                #endif
                
                print("‚úÖ Sess√£o ativa carregada: \(activeSession.plan?.displayTitle ?? "Sem nome")")
            }
        } catch {
            print("‚ùå Erro ao carregar sess√£o ativa: \(error)")
        }
    }
    
    #if os(iOS)
    // MARK: - Integra√ß√£o com Apple Watch
    
    /// Configura observador para mudan√ßas na sess√£o
    private func setupSessionObserver() {
        // Observa mudan√ßas na sess√£o para notificar o Watch
        $currentSession
            .sink { [weak self] session in
                Task { @MainActor in
                    await self?.sendSessionContextToWatch()
                }
            }
            .store(in: &cancellables)
    }
    
    /// Envia contexto atual da sess√£o para o Watch
    private func sendSessionContextToWatch() async {
        guard let session = currentSession else {
            await sendSessionEndToWatch()
            return
        }
        
        let sessionContext: [String: Any] = [
            "type": "sessionContext",
            "sessionId": session.safeId.uuidString,
            "planId": session.plan?.safeId.uuidString ?? "",
            "planTitle": session.plan?.displayTitle ?? "",
            "currentExerciseId": session.currentExercise?.safeId.uuidString ?? "",
            "currentExerciseName": session.currentExercise?.template?.safeName ?? "",
            "currentSetId": session.currentExercise?.currentSet?.safeId.uuidString ?? "",
            "currentSetOrder": session.currentExercise?.currentSet?.order ?? 0,
            "exerciseIndex": session.currentExerciseIndex,
            "isActive": session.isActive
        ]
        
        await connectivityManager.sendMessage(sessionContext, replyHandler: nil)
        print("üì±‚û°Ô∏è‚åö Contexto da sess√£o enviado ao Watch")
    }
    
    /// Notifica o Watch sobre o fim da sess√£o
    private func sendSessionEndToWatch() async {
        let message: [String: Any] = [
            "type": "sessionEnd"
        ]
        
        await connectivityManager.sendMessage(message, replyHandler: nil)
        print("üì±‚û°Ô∏è‚åö Fim de sess√£o notificado ao Watch")
    }
    #endif
    
    // ‚úÖ LOGIN OBRIGAT√ìRIO: Limpeza completa durante logout por inatividade
    func handleInactivityLogout() {
        if isSessionActive {
            print("üèãÔ∏è‚Äç‚ôÇÔ∏è Limpando sess√£o ativa devido ao logout por inatividade")
            endSession() // Finaliza sess√£o ativa automaticamente
        }
        
        // ‚úÖ Limpa usu√°rio atual conforme LOGIN OBRIGAT√ìRIO
        clearCurrentUser()
        print("üîí SessionManager: Logout por inatividade conclu√≠do")
    }
}

// MARK: - Computed Properties
extension SessionManager {
    /// Exerc√≠cio atual da sess√£o
    var currentExercise: CDCurrentExercise? {
        currentSession?.currentExercise
    }
    
    /// S√©rie atual do exerc√≠cio
    var currentSet: CDCurrentSet? {
        currentSession?.currentExercise?.currentSet
    }
    
    /// Plano de treino da sess√£o atual
    var currentPlan: CDWorkoutPlan? {
        currentSession?.plan
    }
    
    /// Usu√°rio atual autenticado
    /// ‚úÖ LOGIN OBRIGAT√ìRIO: Nunca nil ap√≥s login inicial (sess√£o persistente)
    /// ‚ö†Ô∏è Durante refatora√ß√£o: usa currentSession.user como fallback
    /// TODO: Migrar para AuthService.currentUser no item 34
    var currentUser: CDAppUser! {
        return _currentUser ?? currentSession?.user
    }
    
    #if os(iOS)
    /// Contexto da sess√£o formatado para o Watch
    var sessionContextForWatch: [String: Any]? {
        guard let session = currentSession else { return nil }
        
        return [
            "sessionId": session.safeId.uuidString,
            "planId": session.plan?.safeId.uuidString ?? "",
            "planTitle": session.plan?.displayTitle ?? "",
            "currentExerciseId": session.currentExercise?.safeId.uuidString ?? "",
            "currentExerciseName": session.currentExercise?.template?.safeName ?? "",
            "currentSetId": session.currentExercise?.currentSet?.safeId.uuidString ?? "",
            "currentSetOrder": session.currentExercise?.currentSet?.order ?? 0,
            "exerciseIndex": session.currentExerciseIndex,
            "isActive": session.isActive
        ]
    }
    #endif
} 