//
//  BaseViewModel.swift
//  Fitter V2
//
//  Created by Daniel Lobo on 13/05/25.
//

import Foundation
import Combine
import CoreData
import SwiftUI

/// ViewModel base com estados e comportamentos comuns para toda a aplica√ß√£o
/// 
/// Responsabilidades:
/// - Estados de UI (loading, error, processing)
/// - Tratamento de erros consistente  
/// - Orquestra√ß√£o de Use Cases (SEM l√≥gica de neg√≥cio)
/// - Observa√ß√£o do estado de autentica√ß√£o
/// 
/// ‚ö° Clean Architecture:
/// - Inje√ß√£o de depend√™ncias via inicializador
/// - Foco APENAS em l√≥gica de UI/apresenta√ß√£o
/// - Toda persist√™ncia DEVE passar pelos Use Cases
/// - ViewContext apenas para SwiftUI binding (somente leitura)
@MainActor
open class BaseViewModel: ObservableObject {
    
    // MARK: - Estados de UI
    
    /// Indica se uma opera√ß√£o ass√≠ncrona est√° em andamento
    @Published public var isLoading: Bool = false
    
    /// Controla se o alerta de erro deve ser exibido
    @Published public var showError: Bool = false
    
    /// Mensagem de erro para exibir ao usu√°rio
    @Published public var errorMessage: String = ""
    
    /// Indica se h√° uma opera√ß√£o em progresso que pode ser cancelada
    @Published public var isProcessing: Bool = false
    
    /// Usu√°rio atual autenticado
    /// ‚ö†Ô∏è IMPORTANTE: Nunca ser√° nil ap√≥s login inicial (sess√£o persistente)
    /// App com LOGIN OBRIGAT√ìRIO - dados sempre vinculados ao usu√°rio
    @Published public var currentUser: CDAppUser!
    
    // MARK: - Depend√™ncias Injetadas
    
    /// Servi√ßo de opera√ß√µes Core Data
    protected let coreDataService: CoreDataServiceProtocol
    
    /// Use Case de autentica√ß√£o (Clean Architecture)
    protected let authUseCase: AuthUseCaseProtocol
    
    // MARK: - Estado de Preview
    
    #if DEBUG
    /// Indica se o ViewModel est√° rodando em modo Preview (SwiftUI Previews)
    protected var isPreviewMode: Bool = false
    #endif
    
    // MARK: - Combine
    
    /// Set para armazenar Combine cancellables
    protected var cancellables = Set<AnyCancellable>()
    
    // MARK: - Inicializa√ß√£o
    
    /// Inicializa BaseViewModel com depend√™ncias injetadas via DI
    /// - Parameters:
    ///   - coreDataService: Servi√ßo para opera√ß√µes Core Data
    ///   - authUseCase: Use Case de autentica√ß√£o (OBRIGAT√ìRIO via DI)
    public init(
        coreDataService: CoreDataServiceProtocol = CoreDataService(),
        authUseCase: AuthUseCaseProtocol = AuthUseCase(authService: AuthService())
    ) {
        self.coreDataService = coreDataService
        self.authUseCase = authUseCase
        
        setupUserObserver()
    }
    
    deinit {
        cancellables.removeAll()
    }
    
    // MARK: - M√©todos de UI
    
    /// Exibe uma mensagem de erro para o usu√°rio
    /// - Parameter message: Mensagem de erro a ser exibida
    public func showError(message: String) {
        errorMessage = message
        showError = true
        print("‚ùå Erro: \(message)")
    }
    
    /// Limpa o estado de erro atual
    public func clearError() {
        showError = false
        errorMessage = ""
    }
    
    /// Executa uma opera√ß√£o ass√≠ncrona com indicador de loading
    /// - Parameter operation: Opera√ß√£o a ser executada
    /// - Returns: Resultado da opera√ß√£o ou nil em caso de erro
    public func withLoading<T>(_ operation: @escaping () async throws -> T) async -> T? {
        isLoading = true
        defer { isLoading = false }
        
        do {
            return try await operation()
        } catch let error as AuthUseCaseError {
            showError(message: error.localizedDescription)
            return nil
        } catch let error as AuthServiceError {
            showError(message: error.localizedDescription)
            return nil
        } catch let error as CoreDataError {
            showError(message: error.localizedDescription)
            return nil
        } catch {
            showError(message: "Erro inesperado: \(error.localizedDescription)")
            return nil
        }
    }
    
    /// Executa uma opera√ß√£o ass√≠ncrona com indicador de processamento
    /// - Parameter operation: Opera√ß√£o a ser executada
    /// - Returns: Resultado da opera√ß√£o ou nil em caso de erro
    public func withProcessing<T>(_ operation: @escaping () async throws -> T) async -> T? {
        isProcessing = true
        defer { isProcessing = false }
        
        do {
            return try await operation()
        } catch let error as AuthUseCaseError {
            showError(message: error.localizedDescription)
            return nil
        } catch let error as AuthServiceError {
            showError(message: error.localizedDescription)
            return nil
        } catch let error as CoreDataError {
            showError(message: error.localizedDescription)
            return nil
        } catch {
            showError(message: "Erro inesperado: \(error.localizedDescription)")
            return nil
        }
    }
    
    // MARK: - Orquestra√ß√£o de Use Cases
    
    /// Executa um Use Case com tratamento de loading e erros
    /// - Parameter useCase: Use Case a ser executado
    /// - Returns: Resultado do Use Case ou nil em caso de erro
    public func executeUseCase<T>(_ useCase: @escaping () async throws -> T) async -> T? {
        return await withLoading {
            return try await useCase()
        }
    }
    
    /// Executa um Use Case com indicador de processamento
    /// - Parameter useCase: Use Case a ser executado  
    /// - Returns: Resultado do Use Case ou nil em caso de erro
    public func executeUseCaseWithProcessing<T>(_ useCase: @escaping () async throws -> T) async -> T? {
        return await withProcessing {
            return try await useCase()
        }
    }
    
    // MARK: - M√©todos de Autentica√ß√£o
    
    /// Realiza login do usu√°rio
    /// - Parameter credentials: Credenciais de login
    public func login(with credentials: AuthCredentials) async {
        do {
            let result = try await authUseCase.signIn(with: credentials)
            self.currentUser = result.user
        } catch {
            showError(message: error.localizedDescription)
        }
    }
    
    /// Realiza logout manual do usu√°rio
    /// ‚ö†Ô∏è √öNICO meio de deslogar - app mant√©m sess√£o mesmo ao fechar
    public func logout() async {
        do {
            try await authUseCase.signOut()
            self.currentUser = nil
        } catch {
            showError(message: error.localizedDescription)
        }
    }
    
    // MARK: - M√©todos Privados
    
    /// Configura observador do usu√°rio atual
    private func setupUserObserver() {
        #if DEBUG
        // Em modo preview, n√£o configura listener
        if isPreviewMode { return }
        #endif
        
        // ‚úÖ LOGIN OBRIGAT√ìRIO: Restaura sess√£o se existir
        Task {
            if let user = await authUseCase.restoreSession() {
                await MainActor.run {
                    self.currentUser = user
                }
            }
        }
        
        // Observa mudan√ßas no estado de autentica√ß√£o
        NotificationCenter.default
            .publisher(for: .authStateChanged)
            .sink { [weak self] _ in
                Task { @MainActor in
                    // ‚úÖ SESS√ÉO PERSISTENTE: Verifica se h√° usu√°rio v√°lido
                    if let user = await self?.authUseCase.restoreSession() {
                        self?.currentUser = user
                    }
                    // Se user for nil, mant√©m o anterior at√© logout manual
                }
            }
            .store(in: &cancellables)
    }
    
    // MARK: - M√©todos de Inatividade
    
    /// Verifica e trata logout por inatividade
    public func checkAndHandleInactivity() async {
        if authUseCase.checkInactivityTimeout() {
            do {
                try await authUseCase.logoutDueToInactivity()
                
                // Limpar dados locais sens√≠veis
                currentUser = nil
                
                // Mostrar mensagem explicativa
                await MainActor.run {
                    showError(message: "Por seguran√ßa, voc√™ foi deslogado ap√≥s 7 dias de inatividade. Fa√ßa login novamente.")
                }
            } catch {
                showError(message: "Erro ao processar logout por inatividade: \(error.localizedDescription)")
            }
        } else {
            // Atualiza √∫ltimo acesso
            authUseCase.updateLastAppOpenDate()
        }
    }
}

// MARK: - Computed Properties
extension BaseViewModel {
    
    /// Indica se o usu√°rio est√° autenticado
    /// ‚úÖ LOGIN OBRIGAT√ìRIO: Sempre true ap√≥s login inicial (sess√£o persistente)
    public var isAuthenticated: Bool {
        return currentUser != nil
    }
    
    /// Indica se h√° alguma opera√ß√£o em andamento
    public var isBusy: Bool {
        return isLoading || isProcessing
    }
    
    /// Acesso ao contexto principal APENAS para SwiftUI binding
    /// ‚ö†Ô∏è IMPORTANTE: Usar apenas para @FetchRequest e observa√ß√£o
    /// Para opera√ß√µes de persist√™ncia, use Use Cases apropriados
    public var viewContext: NSManagedObjectContext {
        return coreDataService.viewContext
    }
}

// MARK: - Preview Support
#if DEBUG
extension BaseViewModel {
    
    /// Configura o ViewModel para modo preview
    /// - Parameter mockUser: Usu√°rio mock para usar no preview
    public func configureForPreview(mockUser: CDAppUser? = nil) {
        isPreviewMode = true
        
        if let user = mockUser {
            currentUser = user
            print("üéØ BaseViewModel configurado para preview com usu√°rio: \(user.safeName)")
        } else {
            // ‚úÖ CORRE√á√ÉO: Usar MockPersistenceController.shared em vez de PreviewCoreDataStack
            let context = MockPersistenceController.shared.viewContext
            let fetch: NSFetchRequest<CDAppUser> = CDAppUser.fetchRequest()
            if let user = try? context.fetch(fetch).first {
                currentUser = user
                print("üéØ BaseViewModel configurado para preview com usu√°rio do mock: \(user.safeName)")
            } else {
                print("‚ö†Ô∏è BaseViewModel preview: Nenhum usu√°rio mock encontrado")
            }
        }
    }
    
    /// Cria inst√¢ncia para preview com depend√™ncias mockadas
    /// - Parameters:
    ///   - mockUser: Usu√°rio mock
    ///   - mockCoreDataService: CoreDataService mock para testes
    /// - Returns: BaseViewModel configurado para preview
    public static func previewInstance(
        with mockUser: CDAppUser? = nil,
        mockCoreDataService: CoreDataServiceProtocol? = nil
    ) -> BaseViewModel {
        // ‚úÖ CORRE√á√ÉO: Usar MockPersistenceController.shared em vez de PreviewCoreDataStack
        let coreDataService = mockCoreDataService ?? CoreDataService(
            persistenceController: MockPersistenceController.shared
        )
        
        let vm = BaseViewModel(coreDataService: coreDataService)
        vm.configureForPreview(mockUser: mockUser)
        return vm
    }
}
#endif

// MARK: - Notifications
extension Notification.Name {
    /// Notifica√ß√£o para mudan√ßas no estado de autentica√ß√£o
    static let authStateChanged = Notification.Name("authStateChanged")
} 