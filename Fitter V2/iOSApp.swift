//
//  iOSApp.swift
//  Fitter V2
//
//  üì± ENTRY POINT PRINCIPAL - CLEAN ARCHITECTURE COM INJE√á√ÉO DE DEPEND√äNCIAS
//  
//  üéØ RESPONSABILIDADES CENTRAIS:
//  ‚Ä¢ Configurar infraestrutura compartilhada (Core Data, Firebase, HealthKit, RevenueCat)
//  ‚Ä¢ Implementar inje√ß√£o de depend√™ncias completa seguindo Clean Architecture
//  ‚Ä¢ Instanciar Use Cases com depend√™ncias corretas em ordem hier√°rquica
//  ‚Ä¢ Centralizar ViewModels como @StateObject para gerenciamento de estado
//  ‚Ä¢ Gerenciar fluxo de autentica√ß√£o e controle de inatividade de seguran√ßa
//  
//  üèóÔ∏è ARQUITETURA IMPLEMENTADA:
//  ‚Ä¢ Clean Architecture com separa√ß√£o clara de camadas
//  ‚Ä¢ Dependency Injection via protocolos para testabilidade
//  ‚Ä¢ Infraestrutura ‚Üí Services ‚Üí Use Cases ‚Üí ViewModels ‚Üí Views
//  ‚Ä¢ Estado reativo com @StateObject e @EnvironmentObject
//  ‚Ä¢ Async/await para opera√ß√µes n√£o-bloqueantes
//  
//  üîí RECURSOS DE SEGURAN√áA:
//  ‚Ä¢ Verifica√ß√£o autom√°tica de inatividade (7 dias) com logout autom√°tico
//  ‚Ä¢ Dados sempre vinculados ao usu√°rio autenticado
//  ‚Ä¢ Integra√ß√£o com Keychain para dados sens√≠veis
//  ‚Ä¢ Conformidade com diretrizes de privacidade Apple
//  
//  üîÑ INTEGRA√á√ÉO COM SISTEMAS EXTERNOS:
//  ‚Ä¢ HealthKit: Dados vitais em tempo real durante treinos
//  ‚Ä¢ Firebase: Autentica√ß√£o, Firestore para sincroniza√ß√£o
//  ‚Ä¢ RevenueCat: Sistema de assinaturas e compras in-app
//  ‚Ä¢ Apple Watch: Sincroniza√ß√£o via WatchConnectivity
//
//  Created by Daniel Lobo on 08/05/25.
//

import SwiftUI
import HealthKit
import WatchConnectivity
import CoreData
import FirebaseCore
import FacebookCore
import RevenueCat

// MARK: - App Delegate

class AppDelegate: NSObject, UIApplicationDelegate {
    func application(_ application: UIApplication,
                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        FirebaseApp.configure()
        ApplicationDelegate.shared.application(
            application,
            didFinishLaunchingWithOptions: launchOptions
        )
        return true
    }
    
    func application(_ app: UIApplication,
                    open url: URL,
                    options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
        ApplicationDelegate.shared.application(
            app,
            open: url,
            sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String,
            annotation: options[UIApplication.OpenURLOptionsKey.annotation]
        )
    }
}

// MARK: - Main App

/**
 * FitterApp - Entry point principal do aplicativo iOS
 * 
 * ARQUITETURA: Clean Architecture com inje√ß√£o de depend√™ncias completa
 * RESPONSABILIDADES:
 * - Configurar infraestrutura compartilhada (Core Data, Firebase, HealthKit)
 * - Criar e injetar servi√ßos via dependency injection
 * - Instanciar Use Cases com depend√™ncias corretas
 * - Centralizar ViewModels como @StateObject
 * - Gerenciar fluxo de autentica√ß√£o e inatividade
 * 
 * INTEGRA√á√ÉO COM README_FLUXO_DADOS.md:
 * - HealthKitManager para dados vitais
 * - AuthUseCase para login obrigat√≥rio + logout por inatividade
 * - Use Cases de Lifecycle para fluxo granular Watch ‚Üî iPhone
 * 
 * SEGURAN√áA:
 * - Verifica√ß√£o autom√°tica de inatividade (7 dias)
 * - Logout autom√°tico por seguran√ßa
 * - Dados sempre vinculados ao usu√°rio autenticado
 */
@main
struct FitterApp: App {
    
    // MARK: - App Delegate
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    
    // MARK: - 1. Infraestrutura Compartilhada
    
    /// Core Data - Fonte √∫nica de persist√™ncia
    /// PersistenceController otimizado para modelo FitterModel com suporte a Binary Data
    private let persistence = PersistenceController.shared
    
    /// Service de infraestrutura para opera√ß√µes CRUD gen√©ricas
    /// Abstra√ß√£o do Core Data com interface test√°vel e inje√ß√£o de depend√™ncias
    private let coreDataService: CoreDataServiceProtocol
    
    /// Manager de sincroniza√ß√£o em nuvem
    /// Singleton para coordena√ß√£o global de sincroniza√ß√£o com Firestore
    private let cloudSyncManager = CloudSyncManager.shared
    
    /// Service de autentica√ß√£o (email/senha)
    /// Implementa AuthServiceProtocol para opera√ß√µes b√°sicas Firebase Auth
    private let authService: AuthServiceProtocol
    
    /// Manager dedicado para HealthKit
    /// Gerencia permiss√µes e coleta de dados vitais durante treinos
    private let healthKitManager: HealthKitManagerProtocol
    
    /// Service centralizado de timers
    /// Controla timers de descanso, dura√ß√£o de s√©ries e exerc√≠cios
    private let timerService: TimerServiceProtocol
    
    /// Manager de sess√£o iPhone ‚Üî Apple Watch
    /// Respons√°vel por sincroniza√ß√£o em tempo real de dados de treino com Apple Watch
    private let phoneSessionManager: PhoneSessionManagerProtocol
    
    /// Manager dedicado para localiza√ß√£o de treinos
    /// Captura localiza√ß√£o no in√≠cio dos treinos
    private let locationManager: LocationManagerProtocol
    
    // MARK: - 2. Reposit√≥rios Espec√≠ficos
    
    /// Repository para exerc√≠cios Firebase
    /// Interface com Firestore para cat√°logo de exerc√≠cios pr√©-definidos
    private let exerciseRepository: FirestoreExerciseRepositoryProtocol
    
    // MARK: - 3. Services Especializados
    
    /// Service especializado para entidades de treino
    /// Respons√°vel por opera√ß√µes CRUD espec√≠ficas de workout com integra√ß√£o ao Core Data
    private let workoutDataService: WorkoutDataServiceProtocol
    
    /// Service de importa√ß√£o de treinos (imagem, PDF, CSV)
    /// Respons√°vel por parsing e extra√ß√£o de dados de arquivos via OCR, PDFKit e CSV
    private let importService: ImportWorkoutServiceProtocol
    
    // MARK: - 4. Use Cases - Autentica√ß√£o
    
    /// Use Case de autentica√ß√£o (orquestra√ß√£o de todos provedores)
    /// Centraliza login/logout via Apple, Google, Facebook, Email e Biometria
    /// Integrado com SubscriptionManager para controle de assinaturas
    private let authUseCase: AuthUseCaseProtocol
    
    // MARK: - 5. Use Cases - Exerc√≠cios Firebase
    
    /// Use Case para busca de exerc√≠cios Firebase
    /// Consome FirestoreExerciseRepository para cat√°logo de exerc√≠cios remotos
    private let fetchFBExercisesUseCase: FetchFBExercisesUseCaseProtocol
    
    // MARK: - 6. Use Cases - Workout CRUD
    
    /// Use Case para cria√ß√£o de treinos
    /// Integrado com sincroniza√ß√£o autom√°tica via CloudSyncManager
    private let createWorkoutUseCase: CreateWorkoutUseCaseProtocol
    
    /// Use Case para busca de treinos
    /// Fonte de dados principal para listagem de treinos do usu√°rio
    private let fetchWorkoutUseCase: FetchWorkoutUseCaseProtocol
    
    /// Use Case para edi√ß√£o de treinos
    /// Mant√©m hist√≥rico de modifica√ß√µes e sincroniza√ß√£o em tempo real
    private let updateWorkoutUseCase: UpdateWorkoutUseCaseProtocol
    
    /// Use Case para exclus√£o de treinos
    /// Implementa soft delete com possibilidade de recupera√ß√£o
    private let deleteWorkoutUseCase: DeleteWorkoutUseCaseProtocol
    
    /// Use Case para reordena√ß√£o de treinos
    /// Permite reorganiza√ß√£o da lista com persist√™ncia autom√°tica
    private let reorderWorkoutUseCase: ReorderWorkoutUseCaseProtocol
    
    /// Use Case para reordena√ß√£o de exerc√≠cios
    /// Gest√£o da ordem dos exerc√≠cios dentro de cada treino
    private let reorderExerciseUseCase: ReorderExerciseUseCaseProtocol
    
    /// Use Case para sincroniza√ß√£o
    /// Motor central de sincroniza√ß√£o com Firestore para todas as entidades
    private let syncWorkoutUseCase: SyncWorkoutUseCaseProtocol
    
    /// Use Case para importa√ß√£o de treinos
    /// Suporte a importa√ß√£o via c√¢mera, arquivos e outros apps de fitness
    private let importWorkoutUseCase: ImportWorkoutUseCaseProtocol
    
    // MARK: - 7. Use Cases - Workout Lifecycle
    
    /// Use Case para iniciar treino
    /// Transi√ß√£o do planejamento para execu√ß√£o ativa do treino
    private let startWorkoutUseCase: StartWorkoutUseCaseProtocol
    
    /// Use Case para finalizar treino
    /// Consolida√ß√£o de dados e transfer√™ncia para hist√≥rico
    private let endWorkoutUseCase: EndWorkoutUseCaseProtocol
    
    /// Use Case para iniciar exerc√≠cio
    /// Controle granular de in√≠cio de cada exerc√≠cio individual
    private let startExerciseUseCase: StartExerciseUseCaseProtocol
    
    /// Use Case para finalizar exerc√≠cio
    /// Processamento de dados de sensores e m√©tricas do exerc√≠cio
    private let endExerciseUseCase: EndExerciseUseCaseProtocol
    
    /// Use Case para iniciar s√©rie
    /// Controle preciso de cada s√©rie com timer e contadores
    private let startSetUseCase: StartSetUseCaseProtocol
    
    /// Use Case para finalizar s√©rie
    /// Consolida√ß√£o de repeti√ß√µes, peso e dados de sensores
    private let endSetUseCase: EndSetUseCaseProtocol
    
    // MARK: - 8. Services de Assinatura
    
    /// Service do RevenueCat para assinaturas
    /// Interface direta com App Store Connect para compras e verifica√ß√µes
    private let revenueCatService: RevenueCatServiceProtocol
    
    /// Manager de assinaturas (orquestrador)
    /// Centraliza l√≥gica de neg√≥cio para funcionalidades premium
    private let subscriptionManager: SubscriptionManagerProtocol
    
    // MARK: - 8.1. Services de Machine Learning
    
    /// Manager de modelos ML (n√£o implementado)
    /// Respons√°vel por carregar e gerenciar modelos Core ML para detec√ß√£o autom√°tica
    private let mlModelManager: MLModelManagerProtocol
    
    /// Use Case para processamento de dados ML
    /// Integra dados de sensores com modelos ML para detec√ß√£o autom√°tica de repeti√ß√µes
    private let updateDataToMLUseCase: UpdateDataToMLUseCaseProtocol
    
    // MARK: - 9. ViewModels Centralizados
    
    /// ViewModel de autentica√ß√£o (login/cadastro)
    /// Gerencia estado de autentica√ß√£o e navega√ß√£o entre telas de login
    /// Conectado ao AuthUseCase para orquestra√ß√£o de provedores
    @StateObject private var authViewModel: LoginViewModel
    
    /// ViewModel de lista de exerc√≠cios Firebase
    /// Fornece cat√°logo de exerc√≠cios para sele√ß√£o durante cria√ß√£o de treinos
    /// Integrado com cache local para performance offline
    @StateObject private var listExerciseViewModel: ListExerciseViewModel
    
    /// ViewModel principal de treinos
    /// Centraliza estado de todos os treinos do usu√°rio
    /// Conectado a todos os Use Cases de CRUD e Lifecycle
    @StateObject private var workoutViewModel: WorkoutViewModel
    
    /// ViewModel de sess√£o de treino ativa
    /// Gerencia estado em tempo real durante execu√ß√£o de treinos
    /// Integrado com Apple Watch, HealthKit e detec√ß√£o autom√°tica via ML
    @StateObject private var workoutSessionViewModel: WorkoutSessionViewModel
    
    // MARK: - Initializer
    
    /**
     * Inicializador principal do FitterApp
     * 
     * ARQUITETURA CLEAN: Implementa inje√ß√£o de depend√™ncias completa
     * - Infraestrutura ‚Üí Services ‚Üí Use Cases ‚Üí ViewModels
     * - Cada camada recebe depend√™ncias da camada anterior
     * - Protocolos garantem testabilidade e baixo acoplamento
     * 
     * ORDEM DE INICIALIZA√á√ÉO:
     * 0. RevenueCat (obrigat√≥rio antes de tudo)
     * 1. Infraestrutura compartilhada (Core Data, Auth, HealthKit)
     * 2. Services de assinatura (RevenueCat + SubscriptionManager)
     * 2.1. Services de Machine Learning (MLModelManager + UpdateDataToMLUseCase)
     * 3. Reposit√≥rios espec√≠ficos (Firebase Collections)
     * 4. Services especializados (WorkoutDataService)
     * 5-8. Use Cases (Auth, CRUD, Lifecycle)
     * 8.1. Managers de sess√£o (PhoneSessionManager - dependem de Use Cases)
     * 9. ViewModels centralizados (@StateObject)
     * 
     * DEPEND√äNCIAS CR√çTICAS:
     * - CoreDataService ‚Üí todos os Use Cases de persist√™ncia
     * - AuthService ‚Üí AuthUseCase ‚Üí todos os ViewModels
     * - SubscriptionManager ‚Üí controle de funcionalidades premium
     * - CloudSyncManager ‚Üí sincroniza√ß√£o autom√°tica
     * 
     * LOGS: Cada etapa produz logs para debugging e monitoramento
     */
    init() {
        print("üöÄ [FitterApp] Inicializando infraestrutura Clean Architecture...")
        
        // 0. Configurar RevenueCat (ANTES de tudo)
        configureRevenueCat()
        
        // 1. Infraestrutura compartilhada
        self.coreDataService = CoreDataService(
            persistenceController: persistence
        )
        self.authService = AuthService(coreDataService: coreDataService)
        self.healthKitManager = HealthKitManager()
        self.timerService = TimerService()
        self.locationManager = LocationManager()
        
        // 2. Services de Assinatura
        self.revenueCatService = RevenueCatService()
        self.subscriptionManager = SubscriptionManager(
            revenueCatService: revenueCatService,
            cloudSyncManager: cloudSyncManager,
            coreDataService: coreDataService
        )
        
        // 2.1. Services de Machine Learning
        self.mlModelManager = MLModelManager()
        self.updateDataToMLUseCase = UpdateDataToMLUseCase(
            mlModelManager: mlModelManager,
            subscriptionManager: subscriptionManager
        )
        
        // 3. Reposit√≥rios espec√≠ficos
        self.exerciseRepository = FirestoreExerciseRepository()
        
        // 4. Services especializados
        self.workoutDataService = WorkoutDataService(
            coreDataService: coreDataService,
            adapter: CoreDataAdapter()
        )
        self.importService = ImportWorkoutService()
        
        // 5. Use Cases - Autentica√ß√£o
        self.authUseCase = AuthUseCase(
            authService: authService,
            subscriptionManager: subscriptionManager
        )
        
        // 6. Use Cases - Exerc√≠cios Firebase
        self.fetchFBExercisesUseCase = FetchFBExercisesUseCase(repository: exerciseRepository)
        
        // 7. Use Cases - Workout CRUD
        self.syncWorkoutUseCase = SyncWorkoutUseCase(cloudSyncManager: cloudSyncManager)
        
        self.createWorkoutUseCase = CreateWorkoutUseCase(
            workoutDataService: workoutDataService,
            subscriptionManager: subscriptionManager,
            syncUseCase: syncWorkoutUseCase
        )
        
        self.fetchWorkoutUseCase = FetchWorkoutUseCase(
            workoutDataService: workoutDataService
        )
        
        self.updateWorkoutUseCase = UpdateWorkoutUseCase(
            workoutDataService: workoutDataService,
            syncUseCase: syncWorkoutUseCase
        )
        
        self.deleteWorkoutUseCase = DeleteWorkoutUseCase(
            workoutDataService: workoutDataService,
            syncUseCase: syncWorkoutUseCase
        )
        
        self.reorderWorkoutUseCase = ReorderWorkoutUseCase(
            workoutDataService: workoutDataService,
            syncUseCase: syncWorkoutUseCase
        )
        
        self.reorderExerciseUseCase = ReorderExerciseUseCase(
            workoutDataService: workoutDataService,
            syncUseCase: syncWorkoutUseCase
        )
        
        // 8. Use Cases - Workout Lifecycle
        self.startWorkoutUseCase = StartWorkoutUseCase(
            workoutDataService: workoutDataService,
            syncWorkoutUseCase: syncWorkoutUseCase,
            locationManager: locationManager
        )
        
        self.endWorkoutUseCase = EndWorkoutUseCase(
            workoutDataService: workoutDataService,
            syncWorkoutUseCase: syncWorkoutUseCase,
            locationManager: locationManager
        )
        
        self.startExerciseUseCase = StartExerciseUseCase(
            workoutDataService: workoutDataService
        )
        
        self.endExerciseUseCase = EndExerciseUseCase(
            workoutDataService: workoutDataService
        )
        
        self.startSetUseCase = StartSetUseCase(
            workoutDataService: workoutDataService,
            subscriptionManager: subscriptionManager
        )
        
        self.endSetUseCase = EndSetUseCase(
            workoutDataService: workoutDataService,
            syncUseCase: syncWorkoutUseCase
        )
        
        self.importWorkoutUseCase = ImportWorkoutUseCase(
            importService: importService,
            workoutDataService: workoutDataService,
            subscriptionManager: subscriptionManager,
            syncUseCase: syncWorkoutUseCase,
            fetchFBExercisesUseCase: fetchFBExercisesUseCase
        )
        
        // 8.1. Session Managers (ap√≥s Use Cases - dependem de Use Cases)
        self.phoneSessionManager = PhoneSessionManager(
            coreDataService: coreDataService,
            workoutDataService: workoutDataService,
            syncWorkoutUseCase: syncWorkoutUseCase,
            updateDataToMLUseCase: updateDataToMLUseCase
        )
        
        // 9. ViewModels centralizados
        self._authViewModel = StateObject(wrappedValue: LoginViewModel(useCase: authUseCase))
        self._listExerciseViewModel = StateObject(wrappedValue: ListExerciseViewModel(
            fetchExercisesUseCase: fetchFBExercisesUseCase,
            coreDataService: coreDataService,
            authUseCase: authUseCase
        ))
        self._workoutViewModel = StateObject(wrappedValue: WorkoutViewModel(
            createUseCase: createWorkoutUseCase,
            fetchUseCase: fetchWorkoutUseCase,
            updateUseCase: updateWorkoutUseCase,
            deleteUseCase: deleteWorkoutUseCase,
            reorderWorkoutUseCase: reorderWorkoutUseCase,
            reorderExerciseUseCase: reorderExerciseUseCase,
            syncUseCase: syncWorkoutUseCase,
            fetchFBExercisesUseCase: fetchFBExercisesUseCase,
            coreDataService: coreDataService,
            authUseCase: authUseCase
        ))
        self._workoutSessionViewModel = StateObject(wrappedValue: WorkoutSessionViewModel(
            startWorkoutUseCase: startWorkoutUseCase,
            endWorkoutUseCase: endWorkoutUseCase,
            startExerciseUseCase: startExerciseUseCase,
            endExerciseUseCase: endExerciseUseCase,
            startSetUseCase: startSetUseCase,
            endSetUseCase: endSetUseCase,
            fetchWorkoutUseCase: fetchWorkoutUseCase,
            timerService: timerService,
            phoneSessionManager: phoneSessionManager,
            healthKitManager: healthKitManager,
            subscriptionManager: subscriptionManager,
            coreDataService: coreDataService,
            authUseCase: authUseCase
        ))
        
        print("‚úÖ [FitterApp] Infraestrutura Clean Architecture inicializada com sucesso")
    }
    
    // MARK: - Body
    
    /**
     * Interface principal do aplicativo
     * 
     * FLUXO DE NAVEGA√á√ÉO:
     * - Tela de Login (n√£o autenticado) ‚Üí MainTabView (autenticado)
     * - Verifica√ß√£o de autentica√ß√£o reativa via @StateObject authViewModel
     * - Configura√ß√£o autom√°tica do HealthKit no primeiro acesso
     * 
     * GERENCIAMENTO DE ESTADO:
     * - @EnvironmentObject para compartilhamento global de ViewModels
     * - authViewModel: Estado de autentica√ß√£o e dados do usu√°rio
     * - listExerciseViewModel: Cat√°logo de exerc√≠cios Firebase
     * - workoutViewModel: Estado principal dos treinos
     * - workoutSessionViewModel: Estado de treino ativo em tempo real
     * - subscriptionManager: Controle de funcionalidades premium
     * 
     * LIFECYCLE:
     * - onAppear: Executa handleAppLaunch() para verificar inatividade
     * - setupHealthKitAuthorization: Configura permiss√µes de dados vitais
     * 
     * ARQUITETURA:
     * - Scene-based app structure (iOS 14+)
     * - Environment Objects para inje√ß√£o de depend√™ncias na UI
     * - Task async para opera√ß√µes n√£o-bloqueantes
     */
    var body: some Scene {
        WindowGroup {
            Group {
                if authViewModel.isAuthenticated {
                    MainTabView()
                        .onAppear {
                            Task {
                                await handleAppLaunch()
                            }
                        }
                } else {
                    LoginView()
                }
            }
            .environmentObject(authViewModel)
            .environmentObject(listExerciseViewModel)
            .environmentObject(workoutViewModel)
            .environmentObject(workoutSessionViewModel)
            .environmentObject(subscriptionManager as! SubscriptionManager)
            .onAppear {
                setupHealthKitAuthorization()
                setupLocationAuthorization()
            }
        }
    }
    
    // MARK: - Private Methods
    
    /**
     * Configura RevenueCat com chave API
     * 
     * RESPONSABILIDADE: Configura√ß√£o √∫nica do SDK RevenueCat no app launch
     * SEGURAN√áA: Chave API deve ser obtida do RevenueCat Dashboard
     * INTEGRA√á√ÉO: Conforme README_ASSINATURAS.md se√ß√£o 5
     * 
     * ARQUITETURA:
     * - Chamado antes de qualquer outra inicializa√ß√£o
     * - Necess√°rio para funcionamento do SubscriptionManager
     * - Configura ambiente de produ√ß√£o por padr√£o
     */
    private func configureRevenueCat() {
        // ‚ö†Ô∏è IMPORTANTE: Substitua pela sua chave API real do RevenueCat Dashboard
        let revenueCatAPIKey = "YOUR_REVENUECAT_PUBLIC_API_KEY"
        
        Purchases.configure(withAPIKey: revenueCatAPIKey)
        print("‚úÖ [FitterApp] RevenueCat configurado com sucesso")
    }
    
    /**
     * Configura autoriza√ß√£o do HealthKit via HealthKitManager
     * 
     * RESPONSABILIDADE: Delegar configura√ß√£o para HealthKitManager dedicado
     * INTEGRA√á√ÉO: Conforme README_FLUXO_DADOS.md para dados vitais em tempo real
     * 
     * DADOS SOLICITADOS:
     * - Heart Rate (frequ√™ncia card√≠aca durante treinos)
     * - Active Energy (calorias queimadas)
     * - Workout Sessions (sess√µes de treino)
     * - Body Mass (peso corporal para c√°lculos)
     * 
     * PRIVACIDADE:
     * - Permiss√µes solicitadas de forma transparente
     * - Dados mantidos localmente e sincronizados apenas se autorizado
     * - Conformidade com diretrizes Apple Health
     */
    private func setupHealthKitAuthorization() {
        Task {
            do {
                let isAuthorized = try await healthKitManager.requestAuthorization()
                print(isAuthorized ? "‚úÖ [FitterApp] HealthKit autorizado com sucesso" : "‚ö†Ô∏è [FitterApp] HealthKit n√£o autorizado")
            } catch {
                print("‚ùå [FitterApp] Erro ao configurar HealthKit: \(error.localizedDescription)")
            }
        }
    }
    
    /**
     * Configura autoriza√ß√£o de localiza√ß√£o via LocationManager
     * 
     * RESPONSABILIDADE: Delegar configura√ß√£o para LocationManager dedicado
     * INTEGRA√á√ÉO: Captura localiza√ß√£o opcional no in√≠cio dos treinos
     * 
     * OP√á√ïES APRESENTADAS AO USU√ÅRIO:
     * - Permitir Sempre: Captura localiza√ß√£o em background
     * - Durante o Uso do App: Captura apenas quando app est√° ativo
     * - N√£o Permitir: Funcionalidades n√£o s√£o afetadas
     * 
     * PRIVACIDADE:
     * - Modal nativo da Apple com op√ß√µes claras
     * - Localiza√ß√£o √© opcional e n√£o bloqueia funcionalidades
     * - Dados mantidos localmente no Core Data
     * - Conformidade com diretrizes de privacidade Apple
     */
    private func setupLocationAuthorization() {
        Task {
            let status = await locationManager.requestLocationPermission()
            switch status {
            case .authorizedWhenInUse, .authorizedAlways:
                print("‚úÖ [FitterApp] Localiza√ß√£o autorizada: \(status)")
            case .denied, .restricted:
                print("‚ö†Ô∏è [FitterApp] Localiza√ß√£o negada: \(status) - App funcionar√° normalmente")
            case .notDetermined:
                print("üîÑ [FitterApp] Localiza√ß√£o pendente: \(status)")
            @unknown default:
                print("‚ùì [FitterApp] Status de localiza√ß√£o desconhecido: \(status)")
            }
        }
    }
    
    /**
     * Gerencia a√ß√µes no launch do app quando usu√°rio est√° autenticado
     * 
     * RESPONSABILIDADES:
     * - Verificar inatividade de 7 dias (logout autom√°tico por seguran√ßa)
     * - Atualizar lastAppOpenDate
     * - Sincroniza√ß√£o inicial de dados
     * 
     * SEGURAN√áA: Conforme arquitetura de login obrigat√≥rio + logout por inatividade
     */
    private func handleAppLaunch() async {
        print("üîç [FitterApp] Verificando inatividade do usu√°rio...")
        
        do {
            let shouldLogout = authUseCase.checkInactivityTimeout()
            if shouldLogout {
                print("‚è∞ [FitterApp] Logout autom√°tico: usu√°rio inativo por mais de 7 dias")
                try await authUseCase.logoutDueToInactivity()
            } else {
                // Atualizar data do √∫ltimo acesso
                authUseCase.updateLastAppOpenDate()
                print("‚úÖ [FitterApp] LastAppOpenDate atualizada")
                
                // Sincroniza√ß√£o inicial de dados
                await performInitialSync()
            }
        } catch {
            print("‚ùå [FitterApp] Erro ao verificar inatividade: \(error.localizedDescription)")
        }
    }
    
    /**
     * Executa sincroniza√ß√£o inicial de dados
     * 
     * RESPONSABILIDADE: Sincronizar dados essenciais no launch do app
     * 
     * FLUXO DE SINCRONIZA√á√ÉO:
     * - Verifica dados pendentes no Core Data
     * - Agenda upload via CloudSyncManager
     * - Download de mudan√ßas remotas do Firestore
     * - Resolu√ß√£o de conflitos por timestamp
     * 
     * PERFORMANCE:
     * - Execu√ß√£o em background para n√£o bloquear UI
     * - Retry autom√°tico em caso de falhas de rede
     * - Cache local para funcionamento offline
     * 
     * INTEGRA√á√ÉO:
     * - Conectado ao SyncWorkoutUseCase
     * - Suporte a m√∫ltiplos tipos de entidades
     * - Monitoramento de progress para UX
     */
    private func performInitialSync() async {
        print("üîÑ [FitterApp] Iniciando sincroniza√ß√£o de dados...")
        
        // Sincronizar dados de treinos
        do {
            if let currentUser = authViewModel.currentUser {
                // Sincronizar o usu√°rio primeiro
                try await syncWorkoutUseCase.execute(currentUser)
                // Depois executar sincroniza√ß√£o completa de todas as entidades pendentes
                try await syncWorkoutUseCase.syncAllPendingEntities()
                print("‚úÖ [FitterApp] Sincroniza√ß√£o de treinos conclu√≠da")
            }
        } catch {
            print("‚ö†Ô∏è [FitterApp] Erro na sincroniza√ß√£o: \(error.localizedDescription)")
        }
    }
}
